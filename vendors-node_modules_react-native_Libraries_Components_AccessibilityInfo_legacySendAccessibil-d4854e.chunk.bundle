(self["webpackChunkni_miniappdemo"] = self["webpackChunkni_miniappdemo"] || []).push([["vendors-node_modules_react-native_Libraries_Components_AccessibilityInfo_legacySendAccessibil-d4854e"], {
46774: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(88225);
var _interop_require_default = __webpack_require__(99782);
var _NativeAccessibilityManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(57743), exports));
var _default = _NativeAccessibilityManager.default;


}),
24633: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(99782);
var _interop_require_wildcard = __webpack_require__(19983);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31445));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(38422));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'focus',
        'blur',
        'setTextAndSelection'
    ]
});
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidTextInput',
    bubblingEventTypes: {
        topBlur: {
            phasedRegistrationNames: {
                bubbled: 'onBlur',
                captured: 'onBlurCapture'
            }
        },
        topEndEditing: {
            phasedRegistrationNames: {
                bubbled: 'onEndEditing',
                captured: 'onEndEditingCapture'
            }
        },
        topFocus: {
            phasedRegistrationNames: {
                bubbled: 'onFocus',
                captured: 'onFocusCapture'
            }
        },
        topKeyPress: {
            phasedRegistrationNames: {
                bubbled: 'onKeyPress',
                captured: 'onKeyPressCapture'
            }
        },
        topSubmitEditing: {
            phasedRegistrationNames: {
                bubbled: 'onSubmitEditing',
                captured: 'onSubmitEditingCapture'
            }
        }
    },
    directEventTypes: {
        topScroll: {
            registrationName: 'onScroll'
        }
    },
    validAttributes: {
        maxFontSizeMultiplier: true,
        adjustsFontSizeToFit: true,
        minimumFontScale: true,
        autoFocus: true,
        placeholder: true,
        inlineImagePadding: true,
        contextMenuHidden: true,
        textShadowColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        maxLength: true,
        selectTextOnFocus: true,
        textShadowRadius: true,
        underlineColorAndroid: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        textDecorationLine: true,
        submitBehavior: true,
        textAlignVertical: true,
        fontStyle: true,
        textShadowOffset: true,
        selectionColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        selectionHandleColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        placeholderTextColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        importantForAutofill: true,
        lineHeight: true,
        textTransform: true,
        returnKeyType: true,
        keyboardType: true,
        multiline: true,
        color: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        autoComplete: true,
        numberOfLines: true,
        letterSpacing: true,
        returnKeyLabel: true,
        fontSize: true,
        onKeyPress: true,
        cursorColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        text: true,
        showSoftInputOnFocus: true,
        textAlign: true,
        autoCapitalize: true,
        autoCorrect: true,
        caretHidden: true,
        secureTextEntry: true,
        textBreakStrategy: true,
        onScroll: true,
        onContentSizeChange: true,
        disableFullscreenUI: true,
        includeFontPadding: true,
        fontWeight: true,
        fontFamily: true,
        allowFontScaling: true,
        onSelectionChange: true,
        mostRecentEventCount: true,
        inlineImageLeft: true,
        editable: true,
        fontVariant: true,
        borderBottomRightRadius: true,
        borderBottomColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        borderRadius: true,
        borderRightColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        borderColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        borderTopRightRadius: true,
        borderStyle: true,
        borderBottomLeftRadius: true,
        borderLeftColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        borderTopLeftRadius: true,
        borderTopColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        }
    }
};
var AndroidTextInputNativeComponent = _NativeComponentRegistry.get('AndroidTextInput', ()=>__INTERNAL_VIEW_CONFIG);
var _default = AndroidTextInputNativeComponent;


}),
65118: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(99782);
var _interop_require_wildcard = __webpack_require__(19983);
var _object_spread = __webpack_require__(9400);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31445));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(38422));
var _RCTTextInputViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79609));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'focus',
        'blur',
        'setTextAndSelection'
    ]
});
var __INTERNAL_VIEW_CONFIG = _object_spread._({
    uiViewClassName: 'RCTSinglelineTextInputView'
}, _RCTTextInputViewConfig.default);
var SinglelineTextInputNativeComponent = _NativeComponentRegistry.get('RCTSinglelineTextInputView', ()=>__INTERNAL_VIEW_CONFIG);
var _default = SinglelineTextInputNativeComponent;


}),
18108: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(19983);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76462));
var NativeReactNativeFeatureFlags = _TurboModuleRegistry.get('NativeReactNativeFeatureFlagsCxx');
var _default = NativeReactNativeFeatureFlags;


}),
57743: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(19983);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76462));
var _default = _TurboModuleRegistry.get('AccessibilityManager');


}),
2828: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(99782);
var _NativeAccessibilityManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(46774));
/**
 * This is a function exposed to the React Renderer that can be used by the
 * pre-Fabric renderer to emit accessibility events to pre-Fabric nodes.
 */ function legacySendAccessibilityEvent(reactTag, eventType) {
    if (eventType === 'focus' && _NativeAccessibilityManager.default) {
        _NativeAccessibilityManager.default.setAccessibilityFocus(reactTag);
    }
}
module.exports = legacySendAccessibilityEvent;


}),
79609: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _object_spread = __webpack_require__(9400);
var _ViewConfigIgnore = __webpack_require__(77105);
var RCTTextInputViewConfig = {
    bubblingEventTypes: {
        topBlur: {
            phasedRegistrationNames: {
                bubbled: 'onBlur',
                captured: 'onBlurCapture'
            }
        },
        topChange: {
            phasedRegistrationNames: {
                bubbled: 'onChange',
                captured: 'onChangeCapture'
            }
        },
        topEndEditing: {
            phasedRegistrationNames: {
                bubbled: 'onEndEditing',
                captured: 'onEndEditingCapture'
            }
        },
        topFocus: {
            phasedRegistrationNames: {
                bubbled: 'onFocus',
                captured: 'onFocusCapture'
            }
        },
        topKeyPress: {
            phasedRegistrationNames: {
                bubbled: 'onKeyPress',
                captured: 'onKeyPressCapture'
            }
        },
        topSubmitEditing: {
            phasedRegistrationNames: {
                bubbled: 'onSubmitEditing',
                captured: 'onSubmitEditingCapture'
            }
        },
        topTouchCancel: {
            phasedRegistrationNames: {
                bubbled: 'onTouchCancel',
                captured: 'onTouchCancelCapture'
            }
        },
        topTouchEnd: {
            phasedRegistrationNames: {
                bubbled: 'onTouchEnd',
                captured: 'onTouchEndCapture'
            }
        },
        topTouchMove: {
            phasedRegistrationNames: {
                bubbled: 'onTouchMove',
                captured: 'onTouchMoveCapture'
            }
        }
    },
    directEventTypes: {
        topScroll: {
            registrationName: 'onScroll'
        },
        topSelectionChange: {
            registrationName: 'onSelectionChange'
        },
        topContentSizeChange: {
            registrationName: 'onContentSizeChange'
        }
    },
    validAttributes: _object_spread._({
        fontSize: true,
        fontWeight: true,
        fontVariant: true,
        // flowlint-next-line untyped-import:off
        textShadowOffset: {
            diff: __webpack_require__(97569)
        },
        allowFontScaling: true,
        fontStyle: true,
        textTransform: true,
        textAlign: true,
        fontFamily: true,
        lineHeight: true,
        isHighlighted: true,
        writingDirection: true,
        textDecorationLine: true,
        textShadowRadius: true,
        letterSpacing: true,
        textDecorationStyle: true,
        textDecorationColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        color: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        maxFontSizeMultiplier: true,
        textShadowColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        editable: true,
        inputAccessoryViewID: true,
        caretHidden: true,
        enablesReturnKeyAutomatically: true,
        placeholderTextColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        clearButtonMode: true,
        keyboardType: true,
        selection: true,
        returnKeyType: true,
        submitBehavior: true,
        mostRecentEventCount: true,
        scrollEnabled: true,
        selectionColor: {
            process: (__webpack_require__(11073)/* ["default"] */["default"])
        },
        contextMenuHidden: true,
        secureTextEntry: true,
        placeholder: true,
        autoCorrect: true,
        multiline: true,
        textContentType: true,
        maxLength: true,
        autoCapitalize: true,
        keyboardAppearance: true,
        passwordRules: true,
        spellCheck: true,
        selectTextOnFocus: true,
        text: true,
        clearTextOnFocus: true,
        showSoftInputOnFocus: true,
        autoFocus: true,
        lineBreakStrategyIOS: true,
        smartInsertDelete: true
    }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onChange: true,
        onSelectionChange: true,
        onContentSizeChange: true,
        onScroll: true
    }))
};
module.exports = RCTTextInputViewConfig;


}),
35632: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // This class is responsible for coordinating the "focused" state for
// TextInputs. All calls relating to the keyboard should be funneled
// through here.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _AndroidTextInputNativeComponent = __webpack_require__(24633);
var _RCTSingelineTextInputNativeComponent = __webpack_require__(65118);
var findNodeHandle = (__webpack_require__(91375)/* .findNodeHandle */.findNodeHandle);
var Platform = __webpack_require__(58363);
var React = __webpack_require__(13668);
var currentlyFocusedInputRef = null;
var inputs = new Set();
function currentlyFocusedInput() {
    return currentlyFocusedInputRef;
}
/**
 * Returns the ID of the currently focused text field, if one exists
 * If no text field is focused it returns null
 */ function currentlyFocusedField() {
    if (false) {}
    return findNodeHandle(currentlyFocusedInputRef);
}
function focusInput(textField) {
    if (currentlyFocusedInputRef !== textField && textField != null) {
        currentlyFocusedInputRef = textField;
    }
}
function blurInput(textField) {
    if (currentlyFocusedInputRef === textField && textField != null) {
        currentlyFocusedInputRef = null;
    }
}
function focusField(textFieldID) {
    if (false) {}
    return;
}
function blurField(textFieldID) {
    if (false) {}
    return;
}
/**
 * @param {number} TextInputID id of the text field to focus
 * Focuses the specified text field
 * noop if the text field was already focused or if the field is not editable
 */ function focusTextInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    if (textField != null) {
        var // $FlowFixMe - `currentProps` is missing in `NativeMethods`
        _textField_currentProps;
        var fieldCanBeFocused = currentlyFocusedInputRef !== textField && ((_textField_currentProps = textField.currentProps) === null || _textField_currentProps === void 0 ? void 0 : _textField_currentProps.editable) !== false;
        if (!fieldCanBeFocused) {
            return;
        }
        focusInput(textField);
        if (Platform.OS === 'ios') {
            // This isn't necessarily a single line text input
            // But commands don't actually care as long as the thing being passed in
            // actually has a command with that name. So this should work with single
            // and multiline text inputs. Ideally we'll merge them into one component
            // in the future.
            _RCTSingelineTextInputNativeComponent.Commands.focus(textField);
        } else if (Platform.OS === 'android') {
            _AndroidTextInputNativeComponent.Commands.focus(textField);
        }
    }
}
/**
 * @param {number} textFieldID id of the text field to unfocus
 * Unfocuses the specified text field
 * noop if it wasn't focused
 */ function blurTextInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    if (currentlyFocusedInputRef === textField && textField != null) {
        blurInput(textField);
        if (Platform.OS === 'ios') {
            // This isn't necessarily a single line text input
            // But commands don't actually care as long as the thing being passed in
            // actually has a command with that name. So this should work with single
            // and multiline text inputs. Ideally we'll merge them into one component
            // in the future.
            _RCTSingelineTextInputNativeComponent.Commands.blur(textField);
        } else if (Platform.OS === 'android') {
            _AndroidTextInputNativeComponent.Commands.blur(textField);
        }
    }
}
function registerInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    inputs.add(textField);
}
function unregisterInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return;
    }
    inputs.delete(textField);
}
function isTextInput(textField) {
    if (typeof textField === 'number') {
        if (false) {}
        return false;
    }
    return inputs.has(textField);
}
module.exports = {
    currentlyFocusedInput,
    focusInput,
    blurInput,
    currentlyFocusedField,
    focusField,
    blurField,
    focusTextInput,
    blurTextInput,
    registerInput,
    unregisterInput,
    isTextInput
};


}),
74569: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
function flattenStyle(style) {
    if (style === null || typeof style !== 'object') {
        return undefined;
    }
    if (!Array.isArray(style)) {
        // $FlowFixMe[incompatible-return]
        return style;
    }
    var result = {};
    for(var i = 0, styleLength = style.length; i < styleLength; ++i){
        // $FlowFixMe[underconstrained-implicit-instantiation]
        var computedStyle = flattenStyle(style[i]);
        if (computedStyle) {
            // $FlowFixMe[invalid-in-rhs]
            for(var key in computedStyle){
                // $FlowFixMe[incompatible-use]
                // $FlowFixMe[invalid-computed-prop]
                result[key] = computedStyle[key];
            }
        }
    }
    // $FlowFixMe[incompatible-return]
    return result;
}
module.exports = flattenStyle;


}),
38422: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var dispatchCommand = (__webpack_require__(91375)/* .dispatchCommand */.dispatchCommand);
function codegenNativeCommands(options) {
    var commandObj = {};
    options.supportedCommands.forEach((command)=>{
        // $FlowFixMe[missing-local-annot]
        commandObj[command] = (ref, ...args)=>{
            // $FlowFixMe[incompatible-call]
            dispatchCommand(ref, command, args);
        };
    });
    return commandObj;
}
var _default = codegenNativeCommands;


}),
28792: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var logListeners;
function unstable_setLogListeners(listeners) {
    logListeners = listeners;
}
/*
 * @returns {bool} true if different, false if equal
 */ var deepDiffer = function(one, two, ref, maybeOptions) {
    var maxDepthOrOptions = ref === void 0 ? -1 : ref;
    var options = typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;
    var maxDepth = typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;
    if (maxDepth === 0) {
        return true;
    }
    if (one === two) {
        // Short circuit on identical object references instead of traversing them.
        return false;
    }
    if (typeof one === 'function' && typeof two === 'function') {
        // We consider all functions equal unless explicitly configured otherwise
        var unsafelyIgnoreFunctions = options === null || options === void 0 ? void 0 : options.unsafelyIgnoreFunctions;
        if (unsafelyIgnoreFunctions == null) {
            if (logListeners && logListeners.onDifferentFunctionsIgnored && (!options || !('unsafelyIgnoreFunctions' in options))) {
                logListeners.onDifferentFunctionsIgnored(one.name, two.name);
            }
            unsafelyIgnoreFunctions = true;
        }
        return !unsafelyIgnoreFunctions;
    }
    if (typeof one !== 'object' || one === null) {
        // Primitives can be directly compared
        return one !== two;
    }
    if (typeof two !== 'object' || two === null) {
        // We know they are different because the previous case would have triggered
        // otherwise.
        return true;
    }
    if (one.constructor !== two.constructor) {
        return true;
    }
    if (Array.isArray(one)) {
        // We know two is also an array because the constructors are equal
        var len = one.length;
        if (two.length !== len) {
            return true;
        }
        for(var ii = 0; ii < len; ii++){
            if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
                return true;
            }
        }
    } else {
        for(var key in one){
            if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
                return true;
            }
        }
        for(var twoKey in two){
            // The only case we haven't checked yet is keys that are in two but aren't
            // in one, which means they are different.
            if (one[twoKey] === undefined && two[twoKey] !== undefined) {
                return true;
            }
        }
    }
    return false;
};
deepDiffer.unstable_setLogListeners = unstable_setLogListeners;
module.exports = deepDiffer;


}),
64406: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated SignedSource<<870e25c844e692bb04ee49fe20cd3baf>>
 *       strict-local
 */ /**
 * IMPORTANT: Do NOT modify this file directly.
 *
 * To change the definition of the flags, edit
 *   packages/react-native/scripts/featureflags/ReactNativeFeatureFlags.config.js.
 *
 * To regenerate this code, run the following script from the repo root:
 *   yarn featureflags-update
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get allowCollapsableChildren () {
        return allowCollapsableChildren;
    },
    get allowRecursiveCommitsWithSynchronousMountOnAndroid () {
        return allowRecursiveCommitsWithSynchronousMountOnAndroid;
    },
    get animatedShouldDebounceQueueFlush () {
        return animatedShouldDebounceQueueFlush;
    },
    get animatedShouldUseSingleOp () {
        return animatedShouldUseSingleOp;
    },
    get batchRenderingUpdatesInEventLoop () {
        return batchRenderingUpdatesInEventLoop;
    },
    get commonTestFlag () {
        return commonTestFlag;
    },
    get destroyFabricSurfacesInReactInstanceManager () {
        return destroyFabricSurfacesInReactInstanceManager;
    },
    get enableAccessToHostTreeInFabric () {
        return enableAccessToHostTreeInFabric;
    },
    get enableBackgroundExecutor () {
        return enableBackgroundExecutor;
    },
    get enableCleanTextInputYogaNode () {
        return enableCleanTextInputYogaNode;
    },
    get enableGranularShadowTreeStateReconciliation () {
        return enableGranularShadowTreeStateReconciliation;
    },
    get enableMicrotasks () {
        return enableMicrotasks;
    },
    get enableSynchronousStateUpdates () {
        return enableSynchronousStateUpdates;
    },
    get enableUIConsistency () {
        return enableUIConsistency;
    },
    get fixStoppedSurfaceRemoveDeleteTreeUIFrameCallbackLeak () {
        return fixStoppedSurfaceRemoveDeleteTreeUIFrameCallbackLeak;
    },
    get forceBatchingMountItemsOnAndroid () {
        return forceBatchingMountItemsOnAndroid;
    },
    get fuseboxEnabledDebug () {
        return fuseboxEnabledDebug;
    },
    get fuseboxEnabledRelease () {
        return fuseboxEnabledRelease;
    },
    get isLayoutAnimationEnabled () {
        return isLayoutAnimationEnabled;
    },
    get jsOnlyTestFlag () {
        return jsOnlyTestFlag;
    },
    get lazyAnimationCallbacks () {
        return lazyAnimationCallbacks;
    },
    get override () {
        return override;
    },
    get preventDoubleTextMeasure () {
        return preventDoubleTextMeasure;
    },
    get setAndroidLayoutDirection () {
        return setAndroidLayoutDirection;
    },
    get shouldUseAnimatedObjectForTransform () {
        return shouldUseAnimatedObjectForTransform;
    },
    get shouldUseRemoveClippedSubviewsAsDefaultOnIOS () {
        return shouldUseRemoveClippedSubviewsAsDefaultOnIOS;
    },
    get shouldUseSetNativePropsInFabric () {
        return shouldUseSetNativePropsInFabric;
    },
    get useImmediateExecutorInAndroidBridgeless () {
        return useImmediateExecutorInAndroidBridgeless;
    },
    get useModernRuntimeScheduler () {
        return useModernRuntimeScheduler;
    },
    get useNativeViewConfigsInBridgelessMode () {
        return useNativeViewConfigsInBridgelessMode;
    },
    get useRuntimeShadowNodeReferenceUpdate () {
        return useRuntimeShadowNodeReferenceUpdate;
    },
    get useRuntimeShadowNodeReferenceUpdateOnLayout () {
        return useRuntimeShadowNodeReferenceUpdateOnLayout;
    },
    get useStateAlignmentMechanism () {
        return useStateAlignmentMechanism;
    }
});
var _ReactNativeFeatureFlagsBase = __webpack_require__(18480);
var jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var allowCollapsableChildren = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('allowCollapsableChildren', true);
var allowRecursiveCommitsWithSynchronousMountOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('allowRecursiveCommitsWithSynchronousMountOnAndroid', false);
var batchRenderingUpdatesInEventLoop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('batchRenderingUpdatesInEventLoop', false);
var destroyFabricSurfacesInReactInstanceManager = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('destroyFabricSurfacesInReactInstanceManager', false);
var enableBackgroundExecutor = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBackgroundExecutor', false);
var enableCleanTextInputYogaNode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCleanTextInputYogaNode', false);
var enableGranularShadowTreeStateReconciliation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableGranularShadowTreeStateReconciliation', false);
var enableMicrotasks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableMicrotasks', false);
var enableSynchronousStateUpdates = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSynchronousStateUpdates', false);
var enableUIConsistency = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableUIConsistency', false);
var fixStoppedSurfaceRemoveDeleteTreeUIFrameCallbackLeak = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixStoppedSurfaceRemoveDeleteTreeUIFrameCallbackLeak', false);
var forceBatchingMountItemsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('forceBatchingMountItemsOnAndroid', false);
var fuseboxEnabledDebug = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledDebug', false);
var fuseboxEnabledRelease = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledRelease', false);
var lazyAnimationCallbacks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('lazyAnimationCallbacks', false);
var preventDoubleTextMeasure = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('preventDoubleTextMeasure', true);
var setAndroidLayoutDirection = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('setAndroidLayoutDirection', false);
var useImmediateExecutorInAndroidBridgeless = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useImmediateExecutorInAndroidBridgeless', false);
var useModernRuntimeScheduler = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useModernRuntimeScheduler', false);
var useNativeViewConfigsInBridgelessMode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNativeViewConfigsInBridgelessMode', false);
var useRuntimeShadowNodeReferenceUpdate = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRuntimeShadowNodeReferenceUpdate', false);
var useRuntimeShadowNodeReferenceUpdateOnLayout = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRuntimeShadowNodeReferenceUpdateOnLayout', false);
var useStateAlignmentMechanism = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useStateAlignmentMechanism', false);
var override = _ReactNativeFeatureFlagsBase.setOverrides;


}),
18480: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createJavaScriptFlagGetter () {
        return createJavaScriptFlagGetter;
    },
    get createNativeFlagGetter () {
        return createNativeFlagGetter;
    },
    get getOverrides () {
        return getOverrides;
    },
    get setOverrides () {
        return setOverrides;
    }
});
var _interop_require_default = __webpack_require__(99782);
var _NativeReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default._(__webpack_require__(18108));
var accessedFeatureFlags = new Set();
var overrides;
function createGetter(configName, customValueGetter, defaultValue) {
    var cachedValue;
    return ()=>{
        if (cachedValue == null) {
            cachedValue = customValueGetter() ?? defaultValue;
        }
        return cachedValue;
    };
}
function createJavaScriptFlagGetter(configName, defaultValue) {
    return createGetter(configName, ()=>{
        var _overrides_configName;
        accessedFeatureFlags.add(configName);
        return overrides === null || overrides === void 0 ? void 0 : (_overrides_configName = overrides[configName]) === null || _overrides_configName === void 0 ? void 0 : _overrides_configName.call(overrides);
    }, defaultValue);
}
function createNativeFlagGetter(configName, defaultValue) {
    return createGetter(configName, ()=>{
        var _NativeReactNativeFeatureFlags_configName;
        var valueFromNative = _NativeReactNativeFeatureFlags.default === null || _NativeReactNativeFeatureFlags.default === void 0 ? void 0 : (_NativeReactNativeFeatureFlags_configName = _NativeReactNativeFeatureFlags.default[configName]) === null || _NativeReactNativeFeatureFlags_configName === void 0 ? void 0 : _NativeReactNativeFeatureFlags_configName.call(_NativeReactNativeFeatureFlags.default);
        if (valueFromNative == null) {
            logUnavailableNativeModuleError(configName);
        }
        return valueFromNative;
    }, defaultValue);
}
function getOverrides() {
    return overrides;
}
function setOverrides(newOverrides) {
    if (overrides != null) {
        throw new Error('Feature flags cannot be overridden more than once');
    }
    if (accessedFeatureFlags.size > 0) {
        var accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');
        throw new Error(`Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`);
    }
    overrides = newOverrides;
}
var reportedConfigNames = new Set();
function logUnavailableNativeModuleError(configName) {
    if (!reportedConfigNames.has(configName)) {
        reportedConfigNames.add(configName);
        console.error(`Could not access feature flag '${configName}' because native module method was not available`);
    }
}


}),

}]);//# sourceMappingURL=vendors-node_modules_react-native_Libraries_Components_AccessibilityInfo_legacySendAccessibil-d4854e.chunk.bundle.map?platform=ios