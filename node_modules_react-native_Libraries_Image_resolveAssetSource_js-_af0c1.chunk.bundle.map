{"version":3,"file":"node_modules_react-native_Libraries_Image_resolveAssetSource_js-_af0c1.chunk.bundle","sources":["webpack://ni-miniappdemo/../../node_modules/react-native/Libraries/NativeModules/specs/NativeSourceCode.js","webpack://ni-miniappdemo/../../node_modules/react-native/Libraries/Utilities/NativePlatformConstantsIOS.js","webpack://ni-miniappdemo/../../node_modules/react-native/src/private/specs/modules/NativePlatformConstantsIOS.js","webpack://ni-miniappdemo/../../node_modules/react-native/src/private/specs/modules/NativeSourceCode.js","webpack://ni-miniappdemo/../../node_modules/react-native/Libraries/Image/AssetSourceResolver.js","webpack://ni-miniappdemo/../../node_modules/react-native/Libraries/Image/AssetUtils.js","webpack://ni-miniappdemo/../../node_modules/react-native/Libraries/Image/resolveAssetSource.js","webpack://ni-miniappdemo/../../node_modules/react-native/Libraries/Utilities/Platform.ios.js"],"sourcesContent":["export * from '../../../src/private/specs/modules/NativeSourceCode';\nimport NativeSourceCode from '../../../src/private/specs/modules/NativeSourceCode';\nexport default NativeSourceCode;","export * from '../../src/private/specs/modules/NativePlatformConstantsIOS';\nimport NativePlatformConstantsIOS from '../../src/private/specs/modules/NativePlatformConstantsIOS';\nexport default NativePlatformConstantsIOS;","                                                                               \nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n                                     \n                     \n                                \n                        \n                  \n                  \n                  \n                        \n     \n                               \n                    \n                     \n                         \n                          \n   \n                                           \n                                           \n \nexport default (TurboModuleRegistry.getEnforcing      ('PlatformConstants')      );","                                                                               \nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n                                    \n                   \n   \n                                           \n                                          \n \nconst NativeModule = TurboModuleRegistry.getEnforcing      ('SourceCode');\nlet constants = null;\nconst NativeSourceCode = {\n  getConstants()                      {\n    if (constants == null) {\n      constants = NativeModule.getConstants();\n    }\n    return constants;\n  }\n};\nexport default NativeSourceCode;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\n'use strict';\n\n                                    \n                             \n                  \n                   \n               \n                 \n   \n\n                                                                          \n\nconst PixelRatio = require('../Utilities/PixelRatio').default;\nconst Platform = require('../Utilities/Platform');\nconst {pickScale} = require('./AssetUtils');\nconst {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n} = require('@react-native/assets-registry/path-support');\nconst invariant = require('invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset               )         {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset               )         {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const drawableFolder = getAndroidResourceFolderName(asset, scale);\n  const fileName = getAndroidResourceIdentifier(asset);\n  return drawableFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  serverUrl         ;\n  // where the jsbundle is being run from\n  jsbundleUrl         ;\n  // the asset to resolve\n  asset               ;\n\n  constructor(serverUrl         , jsbundleUrl         , asset               ) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer()          {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem()          {\n    return this.jsbundleUrl != null && this.jsbundleUrl?.startsWith('file://');\n  }\n\n  defaultAsset()                      {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL()                      {\n    invariant(this.serverUrl != null, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath()                      {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle()                      {\n    const path = this.jsbundleUrl ?? 'file://';\n    return this.fromSource(\n      // Assets can have relative paths outside of the project root.\n      // When bundling them we replace `../` with `_` to make sure they\n      // don't end up outside of the expected assets directory.\n      path + getScaledAssetPath(this.asset).replace(/\\.\\.\\//g, '_'),\n    );\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale()                      {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(getAndroidResourceIdentifier(this.asset));\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle()                      {\n    const path = this.jsbundleUrl ?? 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source        )                      {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale                                                          =\n    pickScale;\n}\n\nmodule.exports = AssetSourceResolver;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\nimport PixelRatio from '../Utilities/PixelRatio';\n\nlet cacheBreaker;\nlet warnIfCacheBreakerUnset = true;\n\nexport function pickScale(scales               , deviceScale         )         {\n  const requiredDeviceScale = deviceScale ?? PixelRatio.get();\n\n  // Packager guarantees that `scales` array is sorted\n  for (let i = 0; i < scales.length; i++) {\n    if (scales[i] >= requiredDeviceScale) {\n      return scales[i];\n    }\n  }\n\n  // If nothing matches, device scale is larger than any available\n  // scales, so we return the biggest one. Unless the array is empty,\n  // in which case we default to 1\n  return scales[scales.length - 1] || 1;\n}\n\nexport function setUrlCacheBreaker(appendage        ) {\n  cacheBreaker = appendage;\n}\n\nexport function getUrlCacheBreaker()         {\n  if (cacheBreaker == null) {\n    if (__DEV__ && warnIfCacheBreakerUnset) {\n      warnIfCacheBreakerUnset = false;\n      console.warn(\n        'AssetUtils.getUrlCacheBreaker: Cache breaker value is unset',\n      );\n    }\n    return '';\n  }\n  return cacheBreaker;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n// Utilities for resolving an asset into a `source` for e.g. `Image`\n\n                                                               \n                                               \n\nimport SourceCode from '../NativeModules/specs/NativeSourceCode';\n\nconst AssetSourceResolver = require('./AssetSourceResolver');\nconst {pickScale} = require('./AssetUtils');\nconst AssetRegistry = require('@react-native/assets-registry/registry');\n\n                                \n                                \n                          \n\nlet _customSourceTransformers                                 = [];\nlet _serverURL         ;\nlet _scriptURL         ;\nlet _sourceCodeScriptURL         ;\n\nfunction getSourceCodeScriptURL()          {\n  if (_sourceCodeScriptURL != null) {\n    return _sourceCodeScriptURL;\n  }\n\n  _sourceCodeScriptURL = SourceCode.getConstants().scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL()          {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL?.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL         )          {\n  let normalizedScriptURL = scriptURL;\n\n  if (normalizedScriptURL != null) {\n    if (normalizedScriptURL.startsWith('assets://')) {\n      // android: running from within assets, no offline path to use\n      return null;\n    }\n    normalizedScriptURL = normalizedScriptURL.substring(\n      0,\n      normalizedScriptURL.lastIndexOf('/') + 1,\n    );\n    if (!normalizedScriptURL.includes('://')) {\n      // Add file protocol in case we have an absolute file path and not a URL.\n      // This shouldn't really be necessary. scriptURL should be a URL.\n      normalizedScriptURL = 'file://' + normalizedScriptURL;\n    }\n  }\n\n  return normalizedScriptURL;\n}\n\nfunction getScriptURL()          {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n  return _scriptURL;\n}\n\n/**\n * `transformer` can optionally be used to apply a custom transformation when\n * resolving an asset source. This methods overrides all other custom transformers\n * that may have been previously registered.\n */\nfunction setCustomSourceTransformer(\n  transformer                         ,\n)       {\n  _customSourceTransformers = [transformer];\n}\n\n/**\n * Adds a `transformer` into the chain of custom source transformers, which will\n * be applied in the order registered, until one returns a non-null value.\n */\nfunction addCustomSourceTransformer(\n  transformer                         ,\n)       {\n  _customSourceTransformers.push(transformer);\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nfunction resolveAssetSource(source              )                       {\n  if (source == null || typeof source === 'object') {\n    // $FlowFixMe[incompatible-exact] `source` doesn't exactly match `ResolvedAssetSource`\n    // $FlowFixMe[incompatible-return] `source` doesn't exactly match `ResolvedAssetSource`\n    return source;\n  }\n\n  const asset = AssetRegistry.getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(\n    getDevServerURL(),\n    getScriptURL(),\n    asset,\n  );\n\n  // Apply (chained) custom source transformers, if any\n  if (_customSourceTransformers) {\n    for (const customSourceTransformer of _customSourceTransformers) {\n      const transformedSource = customSourceTransformer(resolver);\n      if (transformedSource != null) {\n        return transformedSource;\n      }\n    }\n  }\n\n  return resolver.defaultAsset();\n}\n\nresolveAssetSource.pickScale = pickScale;\nresolveAssetSource.setCustomSourceTransformer = setCustomSourceTransformer;\nresolveAssetSource.addCustomSourceTransformer = addCustomSourceTransformer;\nmodule.exports = resolveAssetSource;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict\n */\n\n             \n                           \n                     \n                         \n\nimport NativePlatformConstantsIOS from './NativePlatformConstantsIOS';\n\nconst Platform               = {\n  __constants: null,\n  OS: 'ios',\n  // $FlowFixMe[unsafe-getters-setters]\n  get Version()         {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.osVersion;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get constants()    \n                                 \n                           \n                       \n                                  \n                      \n                          \n                    \n                    \n                    \n                          \n       \n                       \n                            \n     {\n    // $FlowFixMe[object-this-reference]\n    if (this.__constants == null) {\n      // $FlowFixMe[object-this-reference]\n      this.__constants = NativePlatformConstantsIOS.getConstants();\n    }\n    // $FlowFixMe[object-this-reference]\n    return this.__constants;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isPad()          {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.interfaceIdiom === 'pad';\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTV()          {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.interfaceIdiom === 'tv';\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isVision()          {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.interfaceIdiom === 'vision';\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTesting()          {\n    if (__DEV__) {\n      // $FlowFixMe[object-this-reference]\n      return this.constants.isTesting;\n    }\n    return false;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isDisableAnimations()          {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.isDisableAnimations ?? this.isTesting;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isMacCatalyst()          {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.isMacCatalyst ?? false;\n  },\n  select:    (spec                       )    =>\n    // $FlowFixMe[incompatible-return]\n    'ios' in spec ? spec.ios : 'native' in spec ? spec.native : spec.default,\n};\n\nmodule.exports = Platform;\n"],"names":["_default","_NativeSourceCode","_NativePlatformConstantsIOS","_TurboModuleRegistry","NativeModule","constants","NativeSourceCode","PixelRatio","require","Platform","pickScale","_require","getAndroidResourceFolderName","getAndroidResourceIdentifier","getBasePath","invariant","getScaledAssetPath","asset","scale","scaleSuffix","assetDir","getAssetPathInDrawableFolder","drawableFolder","fileName","AssetSourceResolver","serverUrl","jsbundleUrl","isLoadedFromServer","isLoadedFromFileSystem","_this_jsbundleUrl","defaultAsset","assetServerURL","scaledAssetPath","scaledAssetURLNearBundle","path","resourceIdentifierWithoutScale","drawableFolderInBundle","fromSource","source","module","getUrlCacheBreaker","setUrlCacheBreaker","cacheBreaker","warnIfCacheBreakerUnset","scales","deviceScale","requiredDeviceScale","_PixelRatio","i","appendage","__DEV__","console","AssetRegistry","_customSourceTransformers","_serverURL","_scriptURL","_sourceCodeScriptURL","getSourceCodeScriptURL","getDevServerURL","undefined","sourceCodeScriptURL","match","_coerceLocalScriptURL","scriptURL","normalizedScriptURL","getScriptURL","setCustomSourceTransformer","transformer","addCustomSourceTransformer","resolveAssetSource","resolver","customSourceTransformer","transformedSource","spec"],"mappings":"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"}