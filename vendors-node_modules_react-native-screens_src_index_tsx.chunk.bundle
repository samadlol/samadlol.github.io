(self["webpackChunkni_miniappdemo"] = self["webpackChunkni_miniappdemo"] || []).push([["vendors-node_modules_react-native-screens_src_index_tsx"], {
58196: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(40638);
var nativeComponentName = 'RNSFullWindowOverlay';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSFullWindowOverlay',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
86755: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _object_spread = __webpack_require__(9400);
var NativeComponentRegistry = __webpack_require__(40638);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(97639)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RNSModalScreen';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSModalScreen',
    directEventTypes: {
        topAppear: {
            registrationName: 'onAppear'
        },
        topDisappear: {
            registrationName: 'onDisappear'
        },
        topDismissed: {
            registrationName: 'onDismissed'
        },
        topNativeDismissCancelled: {
            registrationName: 'onNativeDismissCancelled'
        },
        topWillAppear: {
            registrationName: 'onWillAppear'
        },
        topWillDisappear: {
            registrationName: 'onWillDisappear'
        },
        topHeaderHeightChange: {
            registrationName: 'onHeaderHeightChange'
        },
        topTransitionProgress: {
            registrationName: 'onTransitionProgress'
        },
        topGestureCancel: {
            registrationName: 'onGestureCancel'
        },
        topHeaderBackButtonClicked: {
            registrationName: 'onHeaderBackButtonClicked'
        }
    },
    validAttributes: _object_spread._({
        sheetAllowedDetents: true,
        sheetLargestUndimmedDetent: true,
        sheetGrabberVisible: true,
        sheetCornerRadius: true,
        sheetExpandsWhenScrolledToEdge: true,
        customAnimationOnSwipe: true,
        fullScreenSwipeEnabled: true,
        fullScreenSwipeShadowEnabled: true,
        homeIndicatorHidden: true,
        preventNativeDismiss: true,
        gestureEnabled: true,
        statusBarColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        statusBarHidden: true,
        screenOrientation: true,
        statusBarAnimation: true,
        statusBarStyle: true,
        statusBarTranslucent: true,
        gestureResponseDistance: true,
        stackPresentation: true,
        stackAnimation: true,
        transitionDuration: true,
        replaceAnimation: true,
        swipeDirection: true,
        hideKeyboardOnSwipe: true,
        activityState: true,
        navigationBarColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        navigationBarTranslucent: true,
        navigationBarHidden: true,
        nativeBackButtonDismissalEnabled: true
    }, ConditionallyIgnoredEventHandlers({
        onAppear: true,
        onDisappear: true,
        onDismissed: true,
        onNativeDismissCancelled: true,
        onWillAppear: true,
        onWillDisappear: true,
        onHeaderHeightChange: true,
        onTransitionProgress: true,
        onGestureCancel: true,
        onHeaderBackButtonClicked: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
46026: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _reactnative = __webpack_require__(1350);
var _default = _reactnative.TurboModuleRegistry.get('RNSModule');


}),
25935: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(40638);
var nativeComponentName = 'RNSScreenContainer';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenContainer',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
14831: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _object_spread = __webpack_require__(9400);
var NativeComponentRegistry = __webpack_require__(40638);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(97639)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RNSScreen';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreen',
    directEventTypes: {
        topAppear: {
            registrationName: 'onAppear'
        },
        topDisappear: {
            registrationName: 'onDisappear'
        },
        topDismissed: {
            registrationName: 'onDismissed'
        },
        topNativeDismissCancelled: {
            registrationName: 'onNativeDismissCancelled'
        },
        topWillAppear: {
            registrationName: 'onWillAppear'
        },
        topWillDisappear: {
            registrationName: 'onWillDisappear'
        },
        topHeaderHeightChange: {
            registrationName: 'onHeaderHeightChange'
        },
        topTransitionProgress: {
            registrationName: 'onTransitionProgress'
        },
        topGestureCancel: {
            registrationName: 'onGestureCancel'
        },
        topHeaderBackButtonClicked: {
            registrationName: 'onHeaderBackButtonClicked'
        }
    },
    validAttributes: _object_spread._({
        sheetAllowedDetents: true,
        sheetLargestUndimmedDetent: true,
        sheetGrabberVisible: true,
        sheetCornerRadius: true,
        sheetExpandsWhenScrolledToEdge: true,
        customAnimationOnSwipe: true,
        fullScreenSwipeEnabled: true,
        fullScreenSwipeShadowEnabled: true,
        homeIndicatorHidden: true,
        preventNativeDismiss: true,
        gestureEnabled: true,
        statusBarColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        statusBarHidden: true,
        screenOrientation: true,
        statusBarAnimation: true,
        statusBarStyle: true,
        statusBarTranslucent: true,
        gestureResponseDistance: true,
        stackPresentation: true,
        stackAnimation: true,
        transitionDuration: true,
        replaceAnimation: true,
        swipeDirection: true,
        hideKeyboardOnSwipe: true,
        activityState: true,
        navigationBarColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        navigationBarTranslucent: true,
        navigationBarHidden: true,
        nativeBackButtonDismissalEnabled: true
    }, ConditionallyIgnoredEventHandlers({
        onAppear: true,
        onDisappear: true,
        onDismissed: true,
        onNativeDismissCancelled: true,
        onWillAppear: true,
        onWillDisappear: true,
        onHeaderHeightChange: true,
        onTransitionProgress: true,
        onGestureCancel: true,
        onHeaderBackButtonClicked: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
95214: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(40638);
var nativeComponentName = 'RNSScreenNavigationContainer';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenNavigationContainer',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
319: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _object_spread = __webpack_require__(9400);
var NativeComponentRegistry = __webpack_require__(40638);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(97639)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RNSScreenStackHeaderConfig';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenStackHeaderConfig',
    directEventTypes: {
        topAttached: {
            registrationName: 'onAttached'
        },
        topDetached: {
            registrationName: 'onDetached'
        }
    },
    validAttributes: _object_spread._({
        backgroundColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        backTitle: true,
        backTitleFontFamily: true,
        backTitleFontSize: true,
        backTitleVisible: true,
        color: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        direction: true,
        hidden: true,
        hideShadow: true,
        largeTitle: true,
        largeTitleFontFamily: true,
        largeTitleFontSize: true,
        largeTitleFontWeight: true,
        largeTitleBackgroundColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        largeTitleHideShadow: true,
        largeTitleColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        translucent: true,
        title: true,
        titleFontFamily: true,
        titleFontSize: true,
        titleFontWeight: true,
        titleColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        disableBackButtonMenu: true,
        backButtonDisplayMode: true,
        hideBackButton: true,
        backButtonInCustomView: true,
        blurEffect: true,
        topInsetEnabled: true
    }, ConditionallyIgnoredEventHandlers({
        onAttached: true,
        onDetached: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
31334: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(40638);
var nativeComponentName = 'RNSScreenStackHeaderSubview';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenStackHeaderSubview',
    validAttributes: {
        type: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
47038: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _object_spread = __webpack_require__(9400);
var NativeComponentRegistry = __webpack_require__(40638);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(97639)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RNSScreenStack';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenStack',
    directEventTypes: {
        topFinishTransitioning: {
            registrationName: 'onFinishTransitioning'
        }
    },
    validAttributes: _object_spread._({}, ConditionallyIgnoredEventHandlers({
        onFinishTransitioning: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
51494: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _object_spread = __webpack_require__(9400);
var NativeComponentRegistry = __webpack_require__(40638);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(97639)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(84182)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'RNSSearchBar';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSSearchBar',
    directEventTypes: {
        topSearchFocus: {
            registrationName: 'onSearchFocus'
        },
        topSearchBlur: {
            registrationName: 'onSearchBlur'
        },
        topSearchButtonPress: {
            registrationName: 'onSearchButtonPress'
        },
        topCancelButtonPress: {
            registrationName: 'onCancelButtonPress'
        },
        topChangeText: {
            registrationName: 'onChangeText'
        },
        topClose: {
            registrationName: 'onClose'
        },
        topOpen: {
            registrationName: 'onOpen'
        }
    },
    validAttributes: _object_spread._({
        hideWhenScrolling: true,
        autoCapitalize: true,
        placeholder: true,
        placement: true,
        obscureBackground: true,
        hideNavigationBar: true,
        cancelButtonText: true,
        barTintColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        tintColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        textColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        disableBackButtonOverride: true,
        inputType: true,
        hintTextColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        headerIconColor: {
            process: (__webpack_require__(47703)/* ["default"] */["default"])
        },
        shouldShowHintSearchIcon: true
    }, ConditionallyIgnoredEventHandlers({
        onSearchFocus: true,
        onSearchBlur: true,
        onSearchButtonPress: true,
        onCancelButtonPress: true,
        onChangeText: true,
        onClose: true,
        onOpen: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    blur (ref) {
        dispatchCommand(ref, "blur", []);
    },
    focus (ref) {
        dispatchCommand(ref, "focus", []);
    },
    clearText (ref) {
        dispatchCommand(ref, "clearText", []);
    },
    toggleCancelButton (ref, flag) {
        dispatchCommand(ref, "toggleCancelButton", [
            flag
        ]);
    },
    setText (ref, text) {
        dispatchCommand(ref, "setText", [
            text
        ]);
    },
    cancelSearch (ref) {
        dispatchCommand(ref, "cancelSearch", []);
    }
};


}),
39268: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get enableFreeze () {
        return enableFreeze;
    },
    get enableScreens () {
        return enableScreens;
    },
    get freezeEnabled () {
        return freezeEnabled;
    },
    get isNativePlatformSupported () {
        return isNativePlatformSupported;
    },
    get screensEnabled () {
        return screensEnabled;
    },
    get shouldUseActivityState () {
        return shouldUseActivityState;
    }
});
var _reactnative = __webpack_require__(1350);
var shouldUseActivityState = true;
var isNativePlatformSupported = _reactnative.Platform.OS === 'ios' || _reactnative.Platform.OS === 'android' || _reactnative.Platform.OS === 'windows';
var ENABLE_SCREENS = isNativePlatformSupported;
function enableScreens(ref) {
    var shouldEnableScreens = ref === void 0 ? true : ref;
    ENABLE_SCREENS = shouldEnableScreens;
    if (!isNativePlatformSupported) {
        return;
    }
    if (ENABLE_SCREENS && !_reactnative.UIManager.getViewManagerConfig('RNSScreen')) {
        console.error(`Screen native module hasn't been linked. Please check the react-native-screens README for more details`);
    }
}
var ENABLE_FREEZE = false;
function enableFreeze(ref) {
    var shouldEnableReactFreeze = ref === void 0 ? true : ref;
    if (!isNativePlatformSupported) {
        return;
    }
    ENABLE_FREEZE = shouldEnableReactFreeze;
}
function screensEnabled() {
    return ENABLE_SCREENS;
}
function freezeEnabled() {
    return ENABLE_FREEZE;
}


}),
55082: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get executeNativeBackPress () {
        return executeNativeBackPress;
    },
    get isNewBackTitleImplementation () {
        return isNewBackTitleImplementation;
    },
    get isSearchBarAvailableForCurrentPlatform () {
        return isSearchBarAvailableForCurrentPlatform;
    }
});
var _reactnative = __webpack_require__(1350);
var isSearchBarAvailableForCurrentPlatform = [
    'ios',
    'android'
].includes(_reactnative.Platform.OS);
function executeNativeBackPress() {
    // This function invokes the native back press event
    _reactnative.BackHandler.exitApp();
    return true;
}
var isNewBackTitleImplementation = true;


}),
30525: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Freeze", ({
    enumerable: true,
    get: function() {
        return Freeze;
    }
}));
var _interop_require_wildcard = __webpack_require__(19983);
var _jsxruntime = __webpack_require__(34260);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(13668));
var infiniteThenable = {
    then () {}
};
function Suspender(ref) {
    var freeze = ref.freeze, children = ref.children;
    if (freeze) {
        throw infiniteThenable;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Fragment, {
        children: children
    });
}
function Freeze(ref) {
    var freeze = ref.freeze, children = ref.children, _ref_placeholder = ref.placeholder, placeholder = _ref_placeholder === void 0 ? null : _ref_placeholder;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Suspense, {
        fallback: placeholder,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Suspender, {
            freeze: freeze,
            children: children
        })
    });
}


}),
1925: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(19983);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(13668));
var _default = /*#__PURE__*/ _react.createContext(undefined);


}),
67921: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(99782);
var _object_spread = __webpack_require__(9400);
var _jsxruntime = __webpack_require__(34260);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13668));
var _reactnative = __webpack_require__(1350);
var _FullWindowOverlayNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(58196));
var NativeFullWindowOverlay = _FullWindowOverlayNativeComponent.default;
function FullWindowOverlay(props) {
    var _useWindowDimensions = (0, _reactnative.useWindowDimensions)(), width = _useWindowDimensions.width, height = _useWindowDimensions.height;
    if (_reactnative.Platform.OS !== 'ios') {
        console.warn('Using FullWindowOverlay is only valid on iOS devices.');
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _object_spread._({}, props));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeFullWindowOverlay, {
        style: [
            _reactnative.StyleSheet.absoluteFill,
            {
                width,
                height
            }
        ],
        children: props.children
    });
}
var _default = FullWindowOverlay;


}),
79522: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get InnerScreen () {
        return InnerScreen;
    },
    get NativeScreen () {
        return NativeScreen;
    },
    get ScreenContext () {
        return ScreenContext;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(99782);
var _object_spread = __webpack_require__(9400);
var _object_spread_props = __webpack_require__(49356);
var _object_without_properties = __webpack_require__(70540);
var _jsxruntime = __webpack_require__(34260);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13668));
var _reactnative = __webpack_require__(1350);
var _TransitionProgressContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(1925));
var _DelayedFreeze = /*#__PURE__*/ _interop_require_default._(__webpack_require__(32995));
var _core = __webpack_require__(39268);
var _ScreenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(14831));
var _ModalScreenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86755));
var NativeScreen = _ScreenNativeComponent.default;
var AnimatedNativeScreen = _reactnative.Animated.createAnimatedComponent(NativeScreen);
var AnimatedNativeModalScreen = _reactnative.Animated.createAnimatedComponent(_ModalScreenNativeComponent.default);
var InnerScreen = /*#__PURE__*/ _react.default.forwardRef(function InnerScreen(props, ref) {
    var innerRef = _react.default.useRef(null);
    _react.default.useImperativeHandle(ref, ()=>innerRef.current, []);
    var setRef = (ref)=>{
        var _props_onComponentRef;
        innerRef.current = ref;
        (_props_onComponentRef = props.onComponentRef) === null || _props_onComponentRef === void 0 ? void 0 : _props_onComponentRef.call(props, ref);
    };
    var closing = _react.default.useRef(new _reactnative.Animated.Value(0)).current;
    var progress = _react.default.useRef(new _reactnative.Animated.Value(0)).current;
    var goingForward = _react.default.useRef(new _reactnative.Animated.Value(0)).current;
    var _props_enabled = props.enabled, enabled = _props_enabled === void 0 ? (0, _core.screensEnabled)() : _props_enabled, _props_freezeOnBlur = props.freezeOnBlur, freezeOnBlur = _props_freezeOnBlur === void 0 ? (0, _core.freezeEnabled)() : _props_freezeOnBlur, rest = _object_without_properties._(props, [
        "enabled",
        "freezeOnBlur"
    ]);
    // To maintain default behavior of formSheet stack presentation style and to have reasonable
    // defaults for new medium-detent iOS API we need to set defaults here
    var _rest_sheetAllowedDetents = rest.sheetAllowedDetents, sheetAllowedDetents = _rest_sheetAllowedDetents === void 0 ? 'large' : _rest_sheetAllowedDetents, _rest_sheetLargestUndimmedDetent = rest.sheetLargestUndimmedDetent, sheetLargestUndimmedDetent = _rest_sheetLargestUndimmedDetent === void 0 ? 'all' : _rest_sheetLargestUndimmedDetent, _rest_sheetGrabberVisible = rest.sheetGrabberVisible, sheetGrabberVisible = _rest_sheetGrabberVisible === void 0 ? false : _rest_sheetGrabberVisible, _rest_sheetCornerRadius = rest.sheetCornerRadius, sheetCornerRadius = _rest_sheetCornerRadius === void 0 ? -1.0 : _rest_sheetCornerRadius, _rest_sheetExpandsWhenScrolledToEdge = rest.sheetExpandsWhenScrolledToEdge, sheetExpandsWhenScrolledToEdge = _rest_sheetExpandsWhenScrolledToEdge === void 0 ? true : _rest_sheetExpandsWhenScrolledToEdge, stackPresentation = rest.stackPresentation;
    if (enabled && _core.isNativePlatformSupported) {
        // Due to how Yoga resolves layout, we need to have different components for modal nad non-modal screens
        var AnimatedScreen = _reactnative.Platform.OS === 'android' || stackPresentation === undefined || stackPresentation === 'push' || stackPresentation === 'containedModal' || stackPresentation === 'containedTransparentModal' ? AnimatedNativeScreen : AnimatedNativeModalScreen;
        var // Filter out active prop in this case because it is unused and
        // can cause problems depending on react-native version:
        // https://github.com/react-navigation/react-navigation/issues/4886
        active = rest.active, activityState = rest.activityState, children = rest.children, isNativeStack = rest.isNativeStack, gestureResponseDistance = rest.gestureResponseDistance, onGestureCancel = rest.onGestureCancel, style = rest.style, _$props = _object_without_properties._(rest, [
            "active",
            "activityState",
            "children",
            "isNativeStack",
            "gestureResponseDistance",
            "onGestureCancel",
            "style"
        ]);
        if (active !== undefined && activityState === undefined) {
            console.warn('It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens');
            activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition
        }
        var handleRef = (ref)=>{
            var _ref_viewConfig_validAttributes, _ref_viewConfig, _ref__viewConfig_validAttributes, _ref__viewConfig;
            if (ref === null || ref === void 0 ? void 0 : (_ref_viewConfig = ref.viewConfig) === null || _ref_viewConfig === void 0 ? void 0 : (_ref_viewConfig_validAttributes = _ref_viewConfig.validAttributes) === null || _ref_viewConfig_validAttributes === void 0 ? void 0 : _ref_viewConfig_validAttributes.style) {
                ref.viewConfig.validAttributes.style = _object_spread_props._(_object_spread._({}, ref.viewConfig.validAttributes.style), {
                    display: false
                });
                setRef(ref);
            } else if (ref === null || ref === void 0 ? void 0 : (_ref__viewConfig = ref._viewConfig) === null || _ref__viewConfig === void 0 ? void 0 : (_ref__viewConfig_validAttributes = _ref__viewConfig.validAttributes) === null || _ref__viewConfig_validAttributes === void 0 ? void 0 : _ref__viewConfig_validAttributes.style) {
                ref._viewConfig.validAttributes.style = _object_spread_props._(_object_spread._({}, ref._viewConfig.validAttributes.style), {
                    display: false
                });
                setRef(ref);
            }
        };
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_DelayedFreeze.default, {
            freeze: freezeOnBlur && activityState === 0,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedScreen, _object_spread_props._(_object_spread._({}, _$props), {
                // Hierarchy of screens is handled on the native side and setting zIndex value causes this issue:
                // https://github.com/software-mansion/react-native-screens/issues/2345
                // With below change of zIndex, we force RN diffing mechanism to NOT include detaching and attaching mutation in one transaction.
                // Detailed information can be found here https://github.com/software-mansion/react-native-screens/pull/2351
                style: [
                    style,
                    {
                        zIndex: undefined
                    }
                ],
                activityState: activityState,
                sheetAllowedDetents: sheetAllowedDetents,
                sheetLargestUndimmedDetent: sheetLargestUndimmedDetent,
                sheetGrabberVisible: sheetGrabberVisible,
                sheetCornerRadius: sheetCornerRadius,
                sheetExpandsWhenScrolledToEdge: sheetExpandsWhenScrolledToEdge,
                gestureResponseDistance: {
                    start: (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.start) ?? -1,
                    end: (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.end) ?? -1,
                    top: (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.top) ?? -1,
                    bottom: (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.bottom) ?? -1
                },
                // This prevents showing blank screen when navigating between multiple screens with freezing
                // https://github.com/software-mansion/react-native-screens/pull/1208
                ref: handleRef,
                onTransitionProgress: !isNativeStack ? undefined : _reactnative.Animated.event([
                    {
                        nativeEvent: {
                            progress,
                            closing,
                            goingForward
                        }
                    }
                ], {
                    useNativeDriver: true
                }),
                onGestureCancel: onGestureCancel ?? (()=>{
                // for internal use
                }),
                children: !isNativeStack ? children : /*#__PURE__*/ (0, _jsxruntime.jsx)(_TransitionProgressContext.default.Provider, {
                    value: {
                        progress,
                        closing,
                        goingForward
                    },
                    children: children
                })
            }))
        });
    } else {
        // same reason as above
        var active1 = rest.active, activityState1 = rest.activityState, style1 = rest.style, // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onComponentRef = rest.onComponentRef, _$props1 = _object_without_properties._(rest, [
            "active",
            "activityState",
            "style",
            "onComponentRef"
        ]);
        if (active1 !== undefined && activityState1 === undefined) {
            activityState1 = active1 !== 0 ? 2 : 0;
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, _object_spread._({
            style: [
                style1,
                {
                    display: activityState1 !== 0 ? 'flex' : 'none'
                }
            ],
            ref: setRef
        }, _$props1));
    }
});
var ScreenContext = /*#__PURE__*/ _react.default.createContext(InnerScreen);
var Screen = (props)=>{
    var ScreenWrapper = _react.default.useContext(ScreenContext) || InnerScreen;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenWrapper, _object_spread._({}, props));
};
var _default = Screen;


}),
27393: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get NativeScreenContainer () {
        return NativeScreenContainer;
    },
    get NativeScreenNavigationContainer () {
        return NativeScreenNavigationContainer;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(99782);
var _object_spread = __webpack_require__(9400);
var _object_without_properties = __webpack_require__(70540);
var _jsxruntime = __webpack_require__(34260);
var _reactnative = __webpack_require__(1350);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13668));
var _core = __webpack_require__(39268);
var _ScreenContainerNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(25935));
var _ScreenNavigationContainerNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95214));
var NativeScreenContainer = _reactnative.Platform.OS !== 'web' ? _ScreenContainerNativeComponent.default : _reactnative.View;
var NativeScreenNavigationContainer = _reactnative.Platform.OS !== 'web' ? _ScreenNavigationContainerNativeComponent.default : _reactnative.View;
function ScreenContainer(props) {
    var _props_enabled = props.enabled, enabled = _props_enabled === void 0 ? (0, _core.screensEnabled)() : _props_enabled, hasTwoStates = props.hasTwoStates, rest = _object_without_properties._(props, [
        "enabled",
        "hasTwoStates"
    ]);
    if (enabled && _core.isNativePlatformSupported) {
        if (hasTwoStates) {
            var ScreenNavigationContainer = _reactnative.Platform.OS === 'ios' ? NativeScreenNavigationContainer : NativeScreenContainer;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenNavigationContainer, _object_spread._({}, rest));
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeScreenContainer, _object_spread._({}, rest));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _object_spread._({}, rest));
}
var _default = ScreenContainer;


}),
45038: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(99782);
var _object_spread = __webpack_require__(9400);
var _object_spread_props = __webpack_require__(49356);
var _object_without_properties = __webpack_require__(70540);
var _jsxruntime = __webpack_require__(34260);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13668));
var _core = __webpack_require__(39268);
var _DelayedFreeze = /*#__PURE__*/ _interop_require_default._(__webpack_require__(32995));
var _ScreenStackNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47038));
var NativeScreenStack = _ScreenStackNativeComponent.default;
function isFabric() {
    return 'nativeFabricUIManager' in __webpack_require__.g;
}
function ScreenStack(props) {
    var children = props.children, gestureDetectorBridge = props.gestureDetectorBridge, rest = _object_without_properties._(props, [
        "children",
        "gestureDetectorBridge"
    ]);
    var ref = _react.default.useRef(null);
    var size = _react.default.Children.count(children);
    // freezes all screens except the top one
    var childrenWithFreeze = _react.default.Children.map(children, (child, index)=>{
        var _props_descriptors, _descriptor_options;
        // @ts-expect-error it's either SceneView in v6 or RouteView in v5
        var _$props = child.props, key = child.key;
        var descriptor = (_$props === null || _$props === void 0 ? void 0 : _$props.descriptor) ?? (_$props === null || _$props === void 0 ? void 0 : (_props_descriptors = _$props.descriptors) === null || _props_descriptors === void 0 ? void 0 : _props_descriptors[key]);
        var isFreezeEnabled = (descriptor === null || descriptor === void 0 ? void 0 : (_descriptor_options = descriptor.options) === null || _descriptor_options === void 0 ? void 0 : _descriptor_options.freezeOnBlur) ?? (0, _core.freezeEnabled)();
        // On Fabric, when screen is frozen, animated and reanimated values are not updated
        // due to component being unmounted. To avoid this, we don't freeze the previous screen there
        var freezePreviousScreen = isFabric() ? size - index > 2 : size - index > 1;
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_DelayedFreeze.default, {
            freeze: isFreezeEnabled && freezePreviousScreen,
            children: child
        });
    });
    _react.default.useEffect(()=>{
        if (gestureDetectorBridge) {
            gestureDetectorBridge.current.stackUseEffectCallback(ref);
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeScreenStack, _object_spread_props._(_object_spread._({}, rest), {
        ref: ref,
        children: childrenWithFreeze
    }));
}
var _default = ScreenStack;


}),
69199: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ScreenStackHeaderBackButtonImage () {
        return ScreenStackHeaderBackButtonImage;
    },
    get ScreenStackHeaderCenterView () {
        return ScreenStackHeaderCenterView;
    },
    get ScreenStackHeaderConfig () {
        return ScreenStackHeaderConfig;
    },
    get ScreenStackHeaderLeftView () {
        return ScreenStackHeaderLeftView;
    },
    get ScreenStackHeaderRightView () {
        return ScreenStackHeaderRightView;
    },
    get ScreenStackHeaderSearchBarView () {
        return ScreenStackHeaderSearchBarView;
    },
    get ScreenStackHeaderSubview () {
        return ScreenStackHeaderSubview;
    }
});
var _interop_require_default = __webpack_require__(99782);
var _object_spread = __webpack_require__(9400);
var _object_spread_props = __webpack_require__(49356);
var _jsxruntime = __webpack_require__(34260);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13668));
var _reactnative = __webpack_require__(1350);
var _ScreenStackHeaderConfigNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(319));
var _ScreenStackHeaderSubviewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31334));
var ScreenStackHeaderConfig = _ScreenStackHeaderConfigNativeComponent.default;
var ScreenStackHeaderSubview = _ScreenStackHeaderSubviewNativeComponent.default;
var ScreenStackHeaderBackButtonImage = (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, {
        type: "back",
        style: styles.headerSubview,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Image, _object_spread._({
            resizeMode: "center",
            fadeDuration: 0
        }, props))
    });
var ScreenStackHeaderRightView = (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, _object_spread_props._(_object_spread._({}, props), {
        type: "right",
        style: styles.headerSubview
    }));
var ScreenStackHeaderLeftView = (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, _object_spread_props._(_object_spread._({}, props), {
        type: "left",
        style: styles.headerSubview
    }));
var ScreenStackHeaderCenterView = (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, _object_spread_props._(_object_spread._({}, props), {
        type: "center",
        style: styles.headerSubview
    }));
var ScreenStackHeaderSearchBarView = (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, _object_spread_props._(_object_spread._({}, props), {
        type: "searchBar",
        style: styles.headerSubview
    }));
var styles = _reactnative.StyleSheet.create({
    headerSubview: {
        position: 'absolute',
        top: 0,
        right: 0,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center'
    }
});


}),
11724: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get NativeSearchBar () {
        return NativeSearchBar;
    },
    get NativeSearchBarCommands () {
        return NativeSearchBarCommands;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(99782);
var _interop_require_wildcard = __webpack_require__(19983);
var _object_spread = __webpack_require__(9400);
var _object_spread_props = __webpack_require__(49356);
var _jsxruntime = __webpack_require__(34260);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13668));
var _utils = __webpack_require__(55082);
var _reactnative = __webpack_require__(1350);
var _SearchBarNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(51494));
var NativeSearchBar = _SearchBarNativeComponent.default;
var NativeSearchBarCommands = _SearchBarNativeComponent.Commands;
function SearchBar(props, ref) {
    var searchBarRef = _react.default.useRef(null);
    _react.default.useImperativeHandle(ref, ()=>({
            blur: ()=>{
                _callMethodWithRef((ref)=>NativeSearchBarCommands.blur(ref));
            },
            focus: ()=>{
                _callMethodWithRef((ref)=>NativeSearchBarCommands.focus(ref));
            },
            toggleCancelButton: (flag)=>{
                _callMethodWithRef((ref)=>NativeSearchBarCommands.toggleCancelButton(ref, flag));
            },
            clearText: ()=>{
                _callMethodWithRef((ref)=>NativeSearchBarCommands.clearText(ref));
            },
            setText: (text)=>{
                _callMethodWithRef((ref)=>NativeSearchBarCommands.setText(ref, text));
            },
            cancelSearch: ()=>{
                _callMethodWithRef((ref)=>NativeSearchBarCommands.cancelSearch(ref));
            }
        }));
    var _callMethodWithRef = _react.default.useCallback((method)=>{
        var _$ref = searchBarRef.current;
        if (_$ref) {
            method(_$ref);
        } else {
            console.warn('Reference to native search bar component has not been updated yet');
        }
    }, [
        searchBarRef
    ]);
    if (!_utils.isSearchBarAvailableForCurrentPlatform) {
        console.warn('Importing SearchBar is only valid on iOS and Android devices.');
        return _reactnative.View;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeSearchBar, _object_spread_props._(_object_spread._({
        ref: searchBarRef
    }, props), {
        onSearchFocus: props.onFocus,
        onSearchBlur: props.onBlur,
        onSearchButtonPress: props.onSearchButtonPress,
        onCancelButtonPress: props.onCancelButtonPress,
        onChangeText: props.onChangeText
    }));
}
var _default = /*#__PURE__*/ _react.default.forwardRef(SearchBar);


}),
32995: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(99782);
var _sliced_to_array = __webpack_require__(52175);
var _jsxruntime = __webpack_require__(34260);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13668));
var _reactfreeze = __webpack_require__(30525);
// This component allows one more render before freezing the screen.
// Allows activityState to reach the native side and useIsFocused to work correctly.
function DelayedFreeze(ref) {
    var freeze = ref.freeze, children = ref.children;
    // flag used for determining whether freeze should be enabled
    var _React_useState = _sliced_to_array._(_react.default.useState(false), 2), freezeState = _React_useState[0], setFreezeState = _React_useState[1];
    _react.default.useEffect(()=>{
        var id = setImmediate(()=>{
            setFreezeState(freeze);
        });
        return ()=>{
            clearImmediate(id);
        };
    }, [
        freeze
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactfreeze.Freeze, {
        freeze: freeze ? freezeState : false,
        children: children
    });
}
var _default = DelayedFreeze;


}),
25229: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get FullWindowOverlay () {
        return _FullWindowOverlay.default;
    },
    get GHContext () {
        return _GHContext.GHContext;
    },
    get InnerScreen () {
        return _Screen.InnerScreen;
    },
    get NativeScreen () {
        return _Screen.NativeScreen;
    },
    get NativeScreenContainer () {
        return _ScreenContainer.NativeScreenContainer;
    },
    get NativeScreenNavigationContainer () {
        return _ScreenContainer.NativeScreenNavigationContainer;
    },
    get NativeScreensModule () {
        return _NativeScreensModule.default;
    },
    get NativeSearchBar () {
        return _SearchBar.NativeSearchBar;
    },
    get NativeSearchBarCommands () {
        return _SearchBar.NativeSearchBarCommands;
    },
    get Screen () {
        return _Screen.default;
    },
    get ScreenContainer () {
        return _ScreenContainer.default;
    },
    get ScreenContext () {
        return _Screen.ScreenContext;
    },
    get ScreenStack () {
        return _ScreenStack.default;
    },
    get ScreenStackHeaderBackButtonImage () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderBackButtonImage;
    },
    get ScreenStackHeaderCenterView () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderCenterView;
    },
    get ScreenStackHeaderConfig () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderConfig;
    },
    get ScreenStackHeaderLeftView () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderLeftView;
    },
    get ScreenStackHeaderRightView () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderRightView;
    },
    get ScreenStackHeaderSearchBarView () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderSearchBarView;
    },
    get ScreenStackHeaderSubview () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderSubview;
    },
    get SearchBar () {
        return _SearchBar.default;
    },
    get enableFreeze () {
        return _core.enableFreeze;
    },
    get enableScreens () {
        return _core.enableScreens;
    },
    get executeNativeBackPress () {
        return _utils.executeNativeBackPress;
    },
    get freezeEnabled () {
        return _core.freezeEnabled;
    },
    get isNewBackTitleImplementation () {
        return _utils.isNewBackTitleImplementation;
    },
    get isSearchBarAvailableForCurrentPlatform () {
        return _utils.isSearchBarAvailableForCurrentPlatform;
    },
    get screensEnabled () {
        return _core.screensEnabled;
    },
    get shouldUseActivityState () {
        return _core.shouldUseActivityState;
    },
    get useTransitionProgress () {
        return _useTransitionProgress.default;
    }
});
var _export_star = __webpack_require__(88225);
var _interop_require_default = __webpack_require__(99782);
var _interop_require_wildcard = __webpack_require__(19983);
_export_star._(__webpack_require__(28951), exports);
var _core = __webpack_require__(39268);
var _Screen = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(79522));
var _ScreenContainer = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(27393));
var _ScreenStack = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45038));
var _ScreenStackHeaderConfig = __webpack_require__(69199);
var _SearchBar = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(11724));
var _FullWindowOverlay = /*#__PURE__*/ _interop_require_default._(__webpack_require__(67921));
var _NativeScreensModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(46026));
var _GHContext = __webpack_require__(17028);
var _utils = __webpack_require__(55082);
var _useTransitionProgress = /*#__PURE__*/ _interop_require_default._(__webpack_require__(99022));


}),
17028: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "GHContext", ({
    enumerable: true,
    get: function() {
        return GHContext;
    }
}));
var _interop_require_default = __webpack_require__(99782);
var _jsxruntime = __webpack_require__(34260);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13668));
var GHContext = /*#__PURE__*/ _react.default.createContext((props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: props.children
    }));


}),
28951: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(99782);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13668));


}),
99022: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useTransitionProgress;
    }
}));
var _interop_require_default = __webpack_require__(99782);
var _interop_require_wildcard = __webpack_require__(19983);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(13668));
var _TransitionProgressContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(1925));
function useTransitionProgress() {
    var progress = _react.useContext(_TransitionProgressContext.default);
    if (progress === undefined) {
        throw new Error("Couldn't find values for transition progress. Are you inside a screen in Native Stack?");
    }
    return progress;
}


}),

}]);//# sourceMappingURL=vendors-node_modules_react-native-screens_src_index_tsx.chunk.bundle.map?platform=ios