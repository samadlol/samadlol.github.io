{"version":3,"file":"vendors-node_modules_react-navigation_native_src_index_tsx.chunk.bundle","sources":["webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/node_modules/react-is/cjs/react-is.production.min.js","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/node_modules/react-is/index.js","webpack://sas-miniappdemo/../../node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs","webpack://sas-miniappdemo/../../node_modules/@swc/helpers/cjs/_object_spread_props.cjs","webpack://sas-miniappdemo/../../node_modules/@swc/helpers/cjs/_object_without_properties.cjs","webpack://sas-miniappdemo/../../node_modules/@swc/helpers/cjs/_object_without_properties_loose.cjs","webpack://sas-miniappdemo/../../node_modules/@swc/helpers/cjs/_to_primitive.cjs","webpack://sas-miniappdemo/../../node_modules/@swc/helpers/cjs/_to_property_key.cjs","webpack://sas-miniappdemo/../../node_modules/decode-uri-component/index.js","webpack://sas-miniappdemo/../../node_modules/escape-string-regexp/index.js","webpack://sas-miniappdemo/../../node_modules/filter-obj/index.js","webpack://sas-miniappdemo/../../node_modules/nanoid/non-secure/index.js","webpack://sas-miniappdemo/../../node_modules/query-string/index.js","webpack://sas-miniappdemo/../../node_modules/split-on-first/index.js","webpack://sas-miniappdemo/../../node_modules/strict-uri-encode/index.js","webpack://sas-miniappdemo/../../node_modules/use-latest-callback/lib/src/index.js","webpack://sas-miniappdemo/../../node_modules/use-latest-callback/lib/src/useIsomorphicLayoutEffect.native.js","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/BaseNavigationContainer.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/CurrentRenderContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/EnsureSingleNavigator.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/Group.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/NavigationBuilderContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/NavigationContainerRefContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/NavigationContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/NavigationHelpersContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/NavigationRouteContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/NavigationStateContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/PreventRemoveContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/PreventRemoveProvider.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/SceneView.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/Screen.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/StaticContainer.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/UnhandledActionContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/checkDuplicateRouteNames.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/checkSerializable.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/createNavigationContainerRef.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/createNavigatorFactory.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/findFocusedRoute.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/fromEntries.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/getActionFromState.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/getFocusedRouteNameFromRoute.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/getPathFromState.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/getStateFromPath.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/index.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/isArrayEqual.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/isRecordEqual.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/types.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useChildListeners.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useComponent.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useCurrentRender.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useDescriptors.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useEventEmitter.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useFocusEffect.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useFocusEvents.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useFocusedListenersChildrenAdapter.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useIsFocused.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useKeyedChildListeners.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useNavigation.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useNavigationBuilder.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useNavigationCache.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useNavigationContainerRef.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useNavigationHelpers.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useNavigationState.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useOnAction.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useOnGetState.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useOnPreventRemove.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useOnRouteFocus.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useOptionsGetters.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/usePreventRemove.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/usePreventRemoveContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useRegisterNavigator.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useRoute.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useRouteCache.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useScheduleUpdate.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/useSyncState.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/core/src/validatePathConfig.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/Link.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/LinkingContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/NavigationContainer.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/ServerContainer.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/ServerContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/extractPathFromURL.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/index.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/theming/DarkTheme.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/theming/DefaultTheme.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/theming/ThemeContext.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/theming/ThemeProvider.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/theming/useTheme.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/useBackButton.native.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/useDocumentTitle.native.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/useLinkBuilder.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/useLinkProps.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/useLinkTo.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/useLinking.native.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/useScrollToTop.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/native/src/useThenable.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/routers/src/BaseRouter.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/routers/src/CommonActions.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/routers/src/DrawerRouter.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/routers/src/StackRouter.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/routers/src/TabRouter.tsx","webpack://sas-miniappdemo/../../node_modules/@react-navigation/routers/src/index.tsx"],"sourcesContent":["/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","\"use strict\";\n\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) return obj;\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") return { default: obj };\n\n    var cache = _getRequireWildcardCache(nodeInterop);\n\n    if (cache && cache.has(obj)) return cache.get(obj);\n\n    var newObj = { __proto__: null };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);\n            else newObj[key] = obj[key];\n        }\n    }\n\n    newObj.default = obj;\n\n    if (cache) cache.set(obj, newObj);\n\n    return newObj;\n}\nexports._ = _interop_require_wildcard;\n","\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n\n    if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n\n    return target;\n}\nexports._ = _object_spread_props;\n","\"use strict\";\n\nvar _object_without_properties_loose = require(\"./_object_without_properties_loose.cjs\");\n\nfunction _object_without_properties(source, excluded) {\n    if (source == null) return {};\n\n    var target = _object_without_properties_loose._(source, excluded);\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for (i = 0; i < sourceSymbolKeys.length; i++) {\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n\n    return target;\n}\nexports._ = _object_without_properties;\n","\"use strict\";\n\nfunction _object_without_properties_loose(source, excluded) {\n    if (source == null) return {};\n\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n\n    return target;\n}\nexports._ = _object_without_properties_loose;\n","\"use strict\";\n\nvar _type_of = require(\"./_type_of.cjs\");\n\nfunction _to_primitive(input, hint) {\n    if (_type_of._(input) !== \"object\" || input === null) return input;\n\n    var prim = input[Symbol.toPrimitive];\n\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_type_of._(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n\n    return (hint === \"string\" ? String : Number)(input);\n}\nexports._ = _to_primitive;\n","\"use strict\";\n\nvar _to_primitive = require(\"./_to_primitive.cjs\");\nvar _type_of = require(\"./_type_of.cjs\");\n\nfunction _to_property_key(arg) {\n    var key = _to_primitive._(arg, \"string\");\n\n    return _type_of._(key) === \"symbol\" ? key : String(key);\n}\nexports._ = _to_property_key;\n","'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn [decodeURIComponent(components.join(''))];\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher) || [];\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher) || [];\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n","'use strict';\n\nmodule.exports = string => {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a \\unnnn escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n};\n","'use strict';\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size | 0\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size | 0\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nexport { nanoid, customAlphabet }\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), ':list='].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator' ?\n\t\t\t\t'[]=' :\n\t\t\t\t'=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tcase 'bracket-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[\\])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null ?\n\t\t\t\t\t[] :\n\t\t\t\t\tvalue.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], arrayValue);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tif (param === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n\toptions = Object.assign({\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false\n\t}, options);\n\n\tconst {url, query, fragmentIdentifier} = exports.parseUrl(input, options);\n\treturn exports.stringifyUrl({\n\t\turl,\n\t\tquery: filterObject(query, filter),\n\t\tfragmentIdentifier\n\t}, options);\n};\n\nexports.exclude = (input, filter, options) => {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn exports.pick(input, exclusionFilter, options);\n};\n","'use strict';\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n","'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n","\"use strict\";\nvar React = require(\"react\");\nvar useIsomorphicLayoutEffect_1 = require(\"./useIsomorphicLayoutEffect\");\n/**\n * React hook which returns the latest callback without changing the reference.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction useLatestCallback(callback) {\n    var ref = React.useRef(callback);\n    var latestCallback = React.useRef(function latestCallback() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return ref.current.apply(this, args);\n    }).current;\n    (0, useIsomorphicLayoutEffect_1.default)(function () {\n        ref.current = callback;\n    });\n    return latestCallback;\n}\nmodule.exports = useLatestCallback;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nexports.default = react_1.useLayoutEffect;\n","import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n        setOptions: () => {\n          throw new Error('Cannot call setOptions outside a screen');\n        },\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options: object) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n","import * as React from 'react';\n\n/**\n * Context which holds the values for the current navigation tree.\n * Intended for use in SSR. This is not safe to use on the client.\n */\nconst CurrentRenderContext = React.createContext<\n  { options?: object } | undefined\n>(undefined);\n\nexport default CurrentRenderContext;\n","import * as React from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst MULTIPLE_NAVIGATOR_ERROR = `Another navigator is already registered for this container. You likely have multiple navigators under a single \"NavigationContainer\" or \"Screen\". Make sure each navigator is under a separate \"Screen\" container. See https://reactnavigation.org/docs/nesting-navigators for a guide on nesting.`;\n\nexport const SingleNavigatorContext = React.createContext<\n  | {\n      register(key: string): void;\n      unregister(key: string): void;\n    }\n  | undefined\n>(undefined);\n\n/**\n * Component which ensures that there's only one navigator nested under it.\n */\nexport default function EnsureSingleNavigator({ children }: Props) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n\n  const value = React.useMemo(\n    () => ({\n      register(key: string) {\n        const currentKey = navigatorKeyRef.current;\n\n        if (currentKey !== undefined && key !== currentKey) {\n          throw new Error(MULTIPLE_NAVIGATOR_ERROR);\n        }\n\n        navigatorKeyRef.current = key;\n      },\n      unregister(key: string) {\n        const currentKey = navigatorKeyRef.current;\n\n        if (key !== currentKey) {\n          return;\n        }\n\n        navigatorKeyRef.current = undefined;\n      },\n    }),\n    []\n  );\n\n  return (\n    <SingleNavigatorContext.Provider value={value}>\n      {children}\n    </SingleNavigatorContext.Provider>\n  );\n}\n","import type { ParamListBase } from '@react-navigation/routers';\n\nimport type { RouteGroupConfig } from './types';\n\n/**\n * Empty component used for grouping screen configs.\n */\nexport default function Group<\n  ParamList extends ParamListBase,\n  ScreenOptions extends {}\n>(_: RouteGroupConfig<ParamList, ScreenOptions>) {\n  /* istanbul ignore next */\n  return null;\n}\n","import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationHelpers } from './types';\n\nexport type ListenerMap = {\n  action: ChildActionListener;\n  focus: FocusedNavigationListener;\n};\n\nexport type KeyedListenerMap = {\n  getState: GetStateListener;\n  beforeRemove: ChildBeforeRemoveListener;\n};\n\nexport type AddListener = <T extends keyof ListenerMap>(\n  type: T,\n  listener: ListenerMap[T]\n) => void;\n\nexport type AddKeyedListener = <T extends keyof KeyedListenerMap>(\n  type: T,\n  key: string,\n  listener: KeyedListenerMap[T]\n) => void;\n\nexport type ChildActionListener = (\n  action: NavigationAction,\n  visitedNavigators?: Set<string>\n) => boolean;\n\nexport type FocusedNavigationCallback<T> = (\n  navigation: NavigationHelpers<ParamListBase>\n) => T;\n\nexport type FocusedNavigationListener = <T>(\n  callback: FocusedNavigationCallback<T>\n) => {\n  handled: boolean;\n  result: T;\n};\n\nexport type GetStateListener = () => NavigationState;\n\nexport type ChildBeforeRemoveListener = (action: NavigationAction) => boolean;\n\n/**\n * Context which holds the required helpers needed to build nested navigators.\n */\nconst NavigationBuilderContext = React.createContext<{\n  onAction?: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  addListener?: AddListener;\n  addKeyedListener?: AddKeyedListener;\n  onRouteFocus?: (key: string) => void;\n  onDispatchAction: (action: NavigationAction, noop: boolean) => void;\n  onOptionsChange: (options: object) => void;\n  stackRef?: React.MutableRefObject<string | undefined>;\n}>({\n  onDispatchAction: () => undefined,\n  onOptionsChange: () => undefined,\n});\n\nexport default NavigationBuilderContext;\n","import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationContainerRef } from './types';\n\n/**\n * Context which holds the route prop for a screen.\n */\nconst NavigationContainerRefContext = React.createContext<\n  NavigationContainerRef<ParamListBase> | undefined\n>(undefined);\n\nexport default NavigationContainerRefContext;\n","import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\n\n/**\n * Context which holds the navigation prop for a screen.\n */\nconst NavigationContext = React.createContext<\n  NavigationProp<ParamListBase> | undefined\n>(undefined);\n\nexport default NavigationContext;\n","import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationHelpers } from './types';\n\n/**\n * Context which holds the navigation helpers of the parent navigator.\n * Navigators should use this context in their view component.\n */\nconst NavigationHelpersContext = React.createContext<\n  NavigationHelpers<ParamListBase> | undefined\n>(undefined);\n\nexport default NavigationHelpersContext;\n","import type { Route } from '@react-navigation/routers';\nimport * as React from 'react';\n\n/**\n * Context which holds the route prop for a screen.\n */\nconst NavigationRouteContext = React.createContext<Route<string> | undefined>(\n  undefined\n);\n\nexport default NavigationRouteContext;\n","import type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nconst MISSING_CONTEXT_ERROR =\n  \"Couldn't find a navigation context. Have you wrapped your app with 'NavigationContainer'? See https://reactnavigation.org/docs/getting-started for setup instructions.\";\n\nexport default React.createContext<{\n  isDefault?: true;\n  state?: NavigationState | PartialState<NavigationState>;\n  getKey: () => string | undefined;\n  setKey: (key: string) => void;\n  getState: () => NavigationState | PartialState<NavigationState> | undefined;\n  setState: (\n    state: NavigationState | PartialState<NavigationState> | undefined\n  ) => void;\n  getIsInitial: () => boolean;\n  addOptionsGetter?: (\n    key: string,\n    getter: () => object | undefined | null\n  ) => void;\n}>({\n  isDefault: true,\n\n  get getKey(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get setKey(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get getState(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get setState(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get getIsInitial(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n});\n","import * as React from 'react';\n\n/**\n * A type of an object that have a route key as an object key\n * and a value whether to prevent that route.\n */\nexport type PreventedRoutes = Record<string, { preventRemove: boolean }>;\n\nconst PreventRemoveContext = React.createContext<\n  | {\n      preventedRoutes: PreventedRoutes;\n      setPreventRemove: (\n        id: string,\n        routeKey: string,\n        preventRemove: boolean\n      ) => void;\n    }\n  | undefined\n>(undefined);\n\nexport default PreventRemoveContext;\n","import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext, { PreventedRoutes } from './PreventRemoveContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype PreventedRoutesMap = Map<\n  string,\n  {\n    routeKey: string;\n    preventRemove: boolean;\n  }\n>;\n\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = (\n  preventedRoutesMap: PreventedRoutesMap\n): PreventedRoutes => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n\n  const preventedRoutes = preventedRoutesToTransform.reduce<PreventedRoutes>(\n    (acc, { routeKey, preventRemove }) => {\n      acc[routeKey] = {\n        preventRemove: acc[routeKey]?.preventRemove || preventRemove,\n      };\n      return acc;\n    },\n    {}\n  );\n\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider({ children }: Props) {\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] =\n    React.useState<PreventedRoutesMap>(new Map());\n\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue?.setPreventRemove;\n\n  const setPreventRemove = useLatestCallback(\n    (id: string, routeKey: string, preventRemove: boolean): void => {\n      if (\n        preventRemove &&\n        (navigation == null ||\n          navigation\n            ?.getState()\n            .routes.every((route) => route.key !== routeKey))\n      ) {\n        throw new Error(\n          `Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`\n        );\n      }\n\n      setPreventedRoutesMap((prevPrevented) => {\n        // values haven't changed - do nothing\n        if (\n          routeKey === prevPrevented.get(id)?.routeKey &&\n          preventRemove === prevPrevented.get(id)?.preventRemove\n        ) {\n          return prevPrevented;\n        }\n\n        const nextPrevented = new Map(prevPrevented);\n\n        if (preventRemove) {\n          nextPrevented.set(id, {\n            routeKey,\n            preventRemove,\n          });\n        } else {\n          nextPrevented.delete(id);\n        }\n\n        return nextPrevented;\n      });\n    }\n  );\n\n  const isPrevented = [...preventedRoutesMap.values()].some(\n    ({ preventRemove }) => preventRemove\n  );\n\n  React.useEffect(() => {\n    if (route?.key !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route?.key, setParentPrevented]);\n\n  const value = React.useMemo(\n    () => ({\n      setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap),\n    }),\n    [setPreventRemove, preventedRoutesMap]\n  );\n\n  return (\n    <PreventRemoveContext.Provider value={value}>\n      {children}\n    </PreventRemoveContext.Provider>\n  );\n}\n","import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport useOptionsGetters from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions\n  >;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n","import type { NavigationState, ParamListBase } from '@react-navigation/routers';\n\nimport type { EventMapBase, RouteConfig } from './types';\n\n/**\n * Empty component used for specifying route configuration.\n */\nexport default function Screen<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList,\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(_: RouteConfig<ParamList, RouteName, State, ScreenOptions, EventMap>) {\n  /* istanbul ignore next */\n  return null;\n}\n","import * as React from 'react';\n\n/**\n * Component which prevents updates for children if no props changed\n */\nfunction StaticContainer(props: any) {\n  return props.children;\n}\n\nexport default React.memo(StaticContainer, (prevProps: any, nextProps: any) => {\n  const prevPropKeys = Object.keys(prevProps);\n  const nextPropKeys = Object.keys(nextProps);\n\n  if (prevPropKeys.length !== nextPropKeys.length) {\n    return false;\n  }\n\n  for (const key of prevPropKeys) {\n    if (key === 'children') {\n      continue;\n    }\n\n    if (prevProps[key] !== nextProps[key]) {\n      return false;\n    }\n  }\n\n  return true;\n});\n","import type { NavigationAction } from '@react-navigation/routers';\nimport * as React from 'react';\n\nconst UnhandledActionContext = React.createContext<\n  ((action: NavigationAction) => void) | undefined\n>(undefined);\n\nexport default UnhandledActionContext;\n","import type { NavigationState, PartialState } from '@react-navigation/routers';\n\nexport default function checkDuplicateRouteNames(state: NavigationState) {\n  const duplicates: string[][] = [];\n\n  const getRouteNames = (\n    location: string,\n    state: NavigationState | PartialState<NavigationState>\n  ) => {\n    state.routes.forEach((route: (typeof state.routes)[0]) => {\n      const currentLocation = location\n        ? `${location} > ${route.name}`\n        : route.name;\n\n      route.state?.routeNames?.forEach((routeName) => {\n        if (routeName === route.name) {\n          duplicates.push([\n            currentLocation,\n            `${currentLocation} > ${route.name}`,\n          ]);\n        }\n      });\n\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n\n  getRouteNames('', state);\n\n  return duplicates;\n}\n","const checkSerializableWithoutCircularReference = (\n  o: { [key: string]: any },\n  seen: Set<any>,\n  location: (string | number)[]\n):\n  | { serializable: true }\n  | {\n      serializable: false;\n      location: (string | number)[];\n      reason: string;\n    } => {\n  if (\n    o === undefined ||\n    o === null ||\n    typeof o === 'boolean' ||\n    typeof o === 'number' ||\n    typeof o === 'string'\n  ) {\n    return { serializable: true };\n  }\n\n  if (\n    Object.prototype.toString.call(o) !== '[object Object]' &&\n    !Array.isArray(o)\n  ) {\n    return {\n      serializable: false,\n      location,\n      reason: typeof o === 'function' ? 'Function' : String(o),\n    };\n  }\n\n  if (seen.has(o)) {\n    return {\n      serializable: false,\n      reason: 'Circular reference',\n      location,\n    };\n  }\n\n  seen.add(o);\n\n  if (Array.isArray(o)) {\n    for (let i = 0; i < o.length; i++) {\n      const childResult = checkSerializableWithoutCircularReference(\n        o[i],\n        new Set<any>(seen),\n        [...location, i]\n      );\n\n      if (!childResult.serializable) {\n        return childResult;\n      }\n    }\n  } else {\n    for (const key in o) {\n      const childResult = checkSerializableWithoutCircularReference(\n        o[key],\n        new Set<any>(seen),\n        [...location, key]\n      );\n\n      if (!childResult.serializable) {\n        return childResult;\n      }\n    }\n  }\n\n  return { serializable: true };\n};\n\nexport default function checkSerializable(o: { [key: string]: any }) {\n  return checkSerializableWithoutCircularReference(o, new Set<any>(), []);\n}\n","import { CommonActions } from '@react-navigation/routers';\n\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerRef,\n  NavigationContainerRefWithCurrent,\n} from './types';\n\nexport const NOT_INITIALIZED_ERROR =\n  \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.\";\n\nexport default function createNavigationContainerRef<\n  ParamList extends {} = ReactNavigation.RootParamList\n>(): NavigationContainerRefWithCurrent<ParamList> {\n  const methods = [\n    ...Object.keys(CommonActions),\n    'addListener',\n    'removeListener',\n    'resetRoot',\n    'dispatch',\n    'isFocused',\n    'canGoBack',\n    'getRootState',\n    'getState',\n    'getParent',\n    'getCurrentRoute',\n    'getCurrentOptions',\n  ] as const;\n\n  const listeners: Record<string, ((...args: any[]) => void)[]> = {};\n\n  const removeListener = (\n    event: string,\n    callback: (...args: any[]) => void\n  ) => {\n    if (listeners[event]) {\n      listeners[event] = listeners[event].filter((cb) => cb !== callback);\n    }\n  };\n\n  let current: NavigationContainerRef<ParamList> | null = null;\n\n  const ref: NavigationContainerRefWithCurrent<ParamList> = {\n    get current() {\n      return current;\n    },\n    set current(value: NavigationContainerRef<ParamList> | null) {\n      current = value;\n\n      if (value != null) {\n        Object.entries(listeners).forEach(([event, callbacks]) => {\n          callbacks.forEach((callback) => {\n            value.addListener(\n              event as keyof NavigationContainerEventMap,\n              callback\n            );\n          });\n        });\n      }\n    },\n    isReady: () => {\n      if (current == null) {\n        return false;\n      }\n\n      return current.isReady();\n    },\n    ...methods.reduce<any>((acc, name) => {\n      acc[name] = (...args: any[]) => {\n        if (current == null) {\n          switch (name) {\n            case 'addListener': {\n              const [event, callback] = args;\n\n              listeners[event] = listeners[event] || [];\n              listeners[event].push(callback);\n\n              return () => removeListener(event, callback);\n            }\n            case 'removeListener': {\n              const [event, callback] = args;\n\n              removeListener(event, callback);\n              break;\n            }\n            default:\n              console.error(NOT_INITIALIZED_ERROR);\n          }\n        } else {\n          // @ts-expect-error: this is ok\n          return current[name](...args);\n        }\n      };\n      return acc;\n    }, {}),\n  };\n\n  return ref;\n}\n","import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport type * as React from 'react';\n\nimport Group from './Group';\nimport Screen from './Screen';\nimport type { EventMapBase, TypedNavigator } from './types';\n\n/**\n * Higher order component to create a `Navigator` and `Screen` pair.\n * Custom navigators should wrap the navigator component in `createNavigator` before exporting.\n *\n * @param Navigator The navigtor component to wrap.\n * @returns Factory method to create a `Navigator` and `Screen` pair.\n */\nexport default function createNavigatorFactory<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n  NavigatorComponent extends React.ComponentType<any>\n>(Navigator: NavigatorComponent) {\n  return function <ParamList extends ParamListBase>(): TypedNavigator<\n    ParamList,\n    State,\n    ScreenOptions,\n    EventMap,\n    typeof Navigator\n  > {\n    if (arguments[0] !== undefined) {\n      throw new Error(\n        \"Creating a navigator doesn't take an argument. Maybe you are trying to use React Navigation 4 API? See https://reactnavigation.org/docs/hello-react-navigation for the latest API and guides.\"\n      );\n    }\n\n    return {\n      Navigator,\n      Group,\n      Screen,\n    };\n  };\n}\n","import type { InitialState } from '@react-navigation/routers';\n\nexport default function findFocusedRoute(state: InitialState) {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index ?? 0].state != null) {\n    current = current.routes[current.index ?? 0].state;\n  }\n\n  const route = current?.routes[current?.index ?? 0];\n\n  return route;\n}\n","// Object.fromEntries is not available in older iOS versions\nexport default function fromEntries<K extends string, V>(\n  entries: (readonly [K, V])[]\n) {\n  return entries.reduce((acc, [k, v]) => {\n    if (acc.hasOwnProperty(k)) {\n      throw new Error(`A value for key '${k}' already exists in the object.`);\n    }\n\n    acc[k] = v;\n    return acc;\n  }, {} as Record<K, V>);\n}\n","import type {\n  CommonActions,\n  NavigationState,\n  ParamListBase,\n  PartialRoute,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\n\nimport type { NavigatorScreenParams, PathConfig, PathConfigMap } from './types';\n\ntype ConfigItem = {\n  initialRouteName?: string;\n  screens?: Record<string, ConfigItem>;\n};\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap<object>;\n};\n\ntype NavigateAction<State extends NavigationState> = {\n  type: 'NAVIGATE';\n  payload: {\n    name: string;\n    params?: NavigatorScreenParams<State>;\n    path?: string;\n  };\n};\n\nexport default function getActionFromState(\n  state: PartialState<NavigationState>,\n  options?: Options\n): NavigateAction<NavigationState> | CommonActions.Action | undefined {\n  // Create a normalized configs object which will be easier to use\n  const normalizedConfig = options\n    ? createNormalizedConfigItem(options as PathConfig<object> | string)\n    : {};\n\n  const routes =\n    state.index != null ? state.routes.slice(0, state.index + 1) : state.routes;\n\n  if (routes.length === 0) {\n    return undefined;\n  }\n\n  if (\n    !(\n      (routes.length === 1 && routes[0].key === undefined) ||\n      (routes.length === 2 &&\n        routes[0].key === undefined &&\n        routes[0].name === normalizedConfig?.initialRouteName &&\n        routes[1].key === undefined)\n    )\n  ) {\n    return {\n      type: 'RESET',\n      payload: state,\n    };\n  }\n\n  const route = state.routes[state.index ?? state.routes.length - 1];\n\n  let current: PartialState<NavigationState> | undefined = route?.state;\n  let config: ConfigItem | undefined = normalizedConfig?.screens?.[route?.name];\n  let params = { ...route.params } as NavigatorScreenParams<\n    ParamListBase,\n    NavigationState\n  >;\n\n  let payload = route\n    ? { name: route.name, path: route.path, params }\n    : undefined;\n\n  while (current) {\n    if (current.routes.length === 0) {\n      return undefined;\n    }\n\n    const routes =\n      current.index != null\n        ? current.routes.slice(0, current.index + 1)\n        : current.routes;\n\n    const route: Route<string> | PartialRoute<Route<string>> =\n      routes[routes.length - 1];\n\n    // Explicitly set to override existing value when merging params\n    Object.assign(params, {\n      initial: undefined,\n      screen: undefined,\n      params: undefined,\n      state: undefined,\n    });\n\n    if (routes.length === 1 && routes[0].key === undefined) {\n      params.initial = true;\n      params.screen = route.name;\n    } else if (\n      routes.length === 2 &&\n      routes[0].key === undefined &&\n      routes[0].name === config?.initialRouteName &&\n      routes[1].key === undefined\n    ) {\n      params.initial = false;\n      params.screen = route.name;\n    } else {\n      params.state = current;\n      break;\n    }\n\n    if (route.state) {\n      params.params = { ...route.params };\n      params = params.params as NavigatorScreenParams<\n        ParamListBase,\n        NavigationState\n      >;\n    } else {\n      params.path = route.path;\n      params.params = route.params;\n    }\n\n    current = route.state;\n    config = config?.screens?.[route.name];\n  }\n\n  if (!payload) {\n    return;\n  }\n\n  // Try to construct payload for a `NAVIGATE` action from the state\n  // This lets us preserve the navigation state and not lose it\n  return {\n    type: 'NAVIGATE',\n    payload,\n  };\n}\n\nconst createNormalizedConfigItem = (config: PathConfig<object> | string) =>\n  typeof config === 'object' && config != null\n    ? {\n        initialRouteName: config.initialRouteName,\n        screens:\n          config.screens != null\n            ? createNormalizedConfigs(config.screens)\n            : undefined,\n      }\n    : {};\n\nconst createNormalizedConfigs = (options: PathConfigMap<object>) =>\n  Object.entries(options).reduce<Record<string, ConfigItem>>((acc, [k, v]) => {\n    acc[k] = createNormalizedConfigItem(v);\n    return acc;\n  }, {});\n","import type { Route } from '@react-navigation/routers';\n\nimport { CHILD_STATE } from './useRouteCache';\n\nexport default function getFocusedRouteNameFromRoute(\n  route: Partial<Route<string>>\n): string | undefined {\n  // @ts-expect-error: this isn't in type definitions coz we want this private\n  const state = route[CHILD_STATE] ?? route.state;\n  const params = route.params as { screen?: unknown } | undefined;\n\n  const routeName = state\n    ? // Get the currently active route name in the nested navigator\n      state.routes[\n        // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n        // The type property will only exist for rehydrated state and not for state from deep link\n        state.index ??\n          (typeof state.type === 'string' && state.type !== 'stack'\n            ? 0\n            : state.routes.length - 1)\n      ].name\n    : // If state doesn't exist, we need to default to `screen` param if available\n    typeof params?.screen === 'string'\n    ? params.screen\n    : undefined;\n\n  return routeName;\n}\n","import type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport fromEntries from './fromEntries';\nimport type { PathConfig, PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState<ParamList extends {}>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  // Create a normalized configs object which will be easier to use\n  const configs: Record<string, ConfigItem> = options?.screens\n    ? createNormalizedConfigs(options?.screens)\n    : {};\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  return path;\n}\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern: string | undefined;\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  pattern =\n    config.exact !== true\n      ? joinPaths(parentPattern || '', config.path || '')\n      : config.path || '';\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n","import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchResult = config.pattern?.split('/').reduce<{\n        pos: number; // Position of the current path param segment in the path (e.g in pattern `a/:b/:c`, `:a` is 0 and `:b` is 1)\n        matchedParams: Record<string, Record<string, string>>; // The extracted params\n      }>(\n        (acc, p, index) => {\n          if (!p.startsWith(':')) {\n            return acc;\n          }\n\n          // Path parameter so increment position for the segment\n          acc.pos += 1;\n\n          const decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match![(acc.pos + 1) * 2]\n              // Remove trailing slash\n              .replace(/\\/$/, '')\n          );\n\n          Object.assign(acc.matchedParams, {\n            [p]: Object.assign(acc.matchedParams[p] || {}, {\n              [index]: decodedParamSegment,\n            }),\n          });\n\n          return acc;\n        },\n        { pos: -1, matchedParams: {} }\n      );\n\n      const matchedParams = matchResult.matchedParams || {};\n\n      routes = config.routeNames.map((name) => {\n        const routeConfig = configs.find((c) => {\n          // Check matching name AND pattern in case same screen is used at different levels in config\n          return c.screen === name && config.pattern.startsWith(c.pattern);\n        });\n\n        // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n        const normalizedPath = routeConfig?.path\n          .split('/')\n          .filter(Boolean)\n          .join('/');\n\n        // Get the number of segments in the initial pattern\n        const numInitialSegments = routeConfig?.pattern\n          // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n          .replace(new RegExp(`${escape(normalizedPath!)}$`), '')\n          ?.split('/').length;\n\n        const params = normalizedPath\n          ?.split('/')\n          .reduce<Record<string, unknown>>((acc, p, index) => {\n            if (!p.startsWith(':')) {\n              return acc;\n            }\n\n            // Get the real index of the path parameter in the matched path\n            // by offsetting by the number of segments in the initial pattern\n            const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            const value = matchedParams[p]?.[index + offset];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = routeConfig?.parse?.[key]\n                ? routeConfig.parse[key](value)\n                : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n","export { default as BaseNavigationContainer } from './BaseNavigationContainer';\nexport { default as createNavigationContainerRef } from './createNavigationContainerRef';\nexport { default as createNavigatorFactory } from './createNavigatorFactory';\nexport { default as CurrentRenderContext } from './CurrentRenderContext';\nexport { default as findFocusedRoute } from './findFocusedRoute';\nexport { default as getActionFromState } from './getActionFromState';\nexport { default as getFocusedRouteNameFromRoute } from './getFocusedRouteNameFromRoute';\nexport { default as getPathFromState } from './getPathFromState';\nexport { default as getStateFromPath } from './getStateFromPath';\nexport { default as NavigationContainerRefContext } from './NavigationContainerRefContext';\nexport { default as NavigationContext } from './NavigationContext';\nexport { default as NavigationHelpersContext } from './NavigationHelpersContext';\nexport { default as NavigationRouteContext } from './NavigationRouteContext';\nexport { default as PreventRemoveContext } from './PreventRemoveContext';\nexport { default as PreventRemoveProvider } from './PreventRemoveProvider';\nexport * from './types';\nexport { default as useFocusEffect } from './useFocusEffect';\nexport { default as useIsFocused } from './useIsFocused';\nexport { default as useNavigation } from './useNavigation';\nexport { default as useNavigationBuilder } from './useNavigationBuilder';\nexport { default as useNavigationContainerRef } from './useNavigationContainerRef';\nexport { default as useNavigationState } from './useNavigationState';\nexport { default as UNSTABLE_usePreventRemove } from './usePreventRemove';\nexport { default as usePreventRemoveContext } from './usePreventRemoveContext';\nexport { default as useRoute } from './useRoute';\nexport { default as validatePathConfig } from './validatePathConfig';\nexport * from '@react-navigation/routers';\n","/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nexport default function isArrayEqual(a: any[], b: any[]) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  return a.every((it, index) => it === b[index]);\n}\n","/**\n * Compare two records with primitive values as the content.\n */\nexport default function isRecordEqual(\n  a: Record<string, any>,\n  b: Record<string, any>\n) {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n\n  return aKeys.every((key) => a[key] === b[key]);\n}\n","import type {\n  DefaultRouterOptions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport type * as React from 'react';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace ReactNavigation {\n    // eslint-disable-next-line @typescript-eslint/no-empty-interface\n    interface RootParamList {}\n  }\n}\n\ntype Keyof<T extends {}> = Extract<keyof T, string>;\n\nexport type DefaultNavigatorOptions<\n  ParamList extends ParamListBase,\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = DefaultRouterOptions<Keyof<ParamList>> & {\n  /**\n   * Optional ID for the navigator. Can be used with `navigation.getParent(id)` to refer to a parent.\n   */\n  id?: string;\n  /**\n   * Children React Elements to extract the route configuration from.\n   * Only `Screen`, `Group` and `React.Fragment` are supported as children.\n   */\n  children: React.ReactNode;\n  /**\n   * Event listeners for all the screens in the navigator.\n   */\n  screenListeners?:\n    | ScreenListeners<State, EventMap>\n    | ((props: {\n        route: RouteProp<ParamList>;\n        navigation: any;\n      }) => ScreenListeners<State, EventMap>);\n  /**\n   * Default options for all screens under this navigator.\n   */\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamList>;\n        navigation: any;\n      }) => ScreenOptions);\n};\n\nexport type EventMapBase = Record<\n  string,\n  { data?: any; canPreventDefault?: boolean }\n>;\n\nexport type EventMapCore<State extends NavigationState> = {\n  focus: { data: undefined };\n  blur: { data: undefined };\n  state: { data: { state: State } };\n  beforeRemove: { data: { action: NavigationAction }; canPreventDefault: true };\n};\n\nexport type EventArg<\n  EventName extends string,\n  CanPreventDefault extends boolean | undefined = false,\n  Data = undefined\n> = {\n  /**\n   * Type of the event (e.g. `focus`, `blur`)\n   */\n  readonly type: EventName;\n  readonly target?: string;\n} & (CanPreventDefault extends true\n  ? {\n      /**\n       * Whether `event.preventDefault()` was called on this event object.\n       */\n      readonly defaultPrevented: boolean;\n      /**\n       * Prevent the default action which happens on this event.\n       */\n      preventDefault(): void;\n    }\n  : {}) &\n  (undefined extends Data\n    ? { readonly data?: Readonly<Data> }\n    : { readonly data: Readonly<Data> });\n\nexport type EventListenerCallback<\n  EventMap extends EventMapBase,\n  EventName extends keyof EventMap\n> = (\n  e: EventArg<\n    Extract<EventName, string>,\n    EventMap[EventName]['canPreventDefault'],\n    EventMap[EventName]['data']\n  >\n) => void;\n\nexport type EventConsumer<EventMap extends EventMapBase> = {\n  /**\n   * Subscribe to events from the parent navigator.\n   *\n   * @param type Type of the event (e.g. `focus`, `blur`)\n   * @param callback Callback listener which is executed upon receiving the event.\n   */\n  addListener<EventName extends Keyof<EventMap>>(\n    type: EventName,\n    callback: EventListenerCallback<EventMap, EventName>\n  ): () => void;\n  removeListener<EventName extends Keyof<EventMap>>(\n    type: EventName,\n    callback: EventListenerCallback<EventMap, EventName>\n  ): void;\n};\n\nexport type EventEmitter<EventMap extends EventMapBase> = {\n  /**\n   * Emit an event to child screens.\n   *\n   * @param options.type Type of the event (e.g. `focus`, `blur`)\n   * @param [options.data] Optional information regarding the event.\n   * @param [options.target] Key of the target route which should receive the event.\n   * If not specified, all routes receive the event.\n   */\n  emit<EventName extends Keyof<EventMap>>(\n    options: {\n      type: EventName;\n      target?: string;\n    } & (EventMap[EventName]['canPreventDefault'] extends true\n      ? { canPreventDefault: true }\n      : {}) &\n      (undefined extends EventMap[EventName]['data']\n        ? { data?: EventMap[EventName]['data'] }\n        : { data: EventMap[EventName]['data'] })\n  ): EventArg<\n    EventName,\n    EventMap[EventName]['canPreventDefault'],\n    EventMap[EventName]['data']\n  >;\n};\n\nexport class PrivateValueStore<T extends [any, any, any]> {\n  /**\n   * UGLY HACK! DO NOT USE THE TYPE!!!\n   *\n   * TypeScript requires a type to be used to be able to infer it.\n   * The type should exist as its own without any operations such as union.\n   * So we need to figure out a way to store this type in a property.\n   * The problem with a normal property is that it shows up in intelliSense.\n   * Adding private keyword works, but the annotation is stripped away in declaration.\n   * Turns out if we use an empty string, it doesn't show up in intelliSense.\n   */\n  protected ''?: T;\n}\n\ntype NavigationHelpersCommon<\n  ParamList extends ParamListBase,\n  State extends NavigationState = NavigationState\n> = {\n  /**\n   * Dispatch an action or an update function to the router.\n   * The update function will receive the current state,\n   *\n   * @param action Action object or update function.\n   */\n  dispatch(\n    action: NavigationAction | ((state: State) => NavigationAction)\n  ): void;\n\n  /**\n   * Navigate to a route in current navigation tree.\n   *\n   * @param name Name of the route to navigate to.\n   * @param [params] Params object for the route.\n   */\n  navigate<RouteName extends keyof ParamList>(\n    ...args: // this first condition allows us to iterate over a union type\n    // This is to avoid getting a union of all the params from `ParamList[RouteName]`,\n    // which will get our types all mixed up if a union RouteName is passed in.\n    RouteName extends unknown\n      ? // This condition checks if the params are optional,\n        // which means it's either undefined or a union with undefined\n        undefined extends ParamList[RouteName]\n        ?\n            | [screen: RouteName] // if the params are optional, we don't have to provide it\n            | [screen: RouteName, params: ParamList[RouteName]]\n        : [screen: RouteName, params: ParamList[RouteName]]\n      : never\n  ): void;\n\n  /**\n   * Navigate to a route in current navigation tree.\n   *\n   * @param route Object with `key` or `name` for the route to navigate to, and a `params` object.\n   */\n  navigate<RouteName extends keyof ParamList>(\n    options: RouteName extends unknown\n      ?\n          | { key: string; params?: ParamList[RouteName]; merge?: boolean }\n          | {\n              name: RouteName;\n              key?: string;\n              params: ParamList[RouteName];\n              merge?: boolean;\n            }\n      : never\n  ): void;\n\n  /**\n   * Reset the navigation state to the provided state.\n   *\n   * @param state Navigation state object.\n   */\n  reset(state: PartialState<State> | State): void;\n\n  /**\n   * Go back to the previous route in history.\n   */\n  goBack(): void;\n\n  /**\n   * Check if the screen is focused. The method returns `true` if focused, `false` otherwise.\n   * Note that this method doesn't re-render screen when the focus changes. So don't use it in `render`.\n   * To get notified of focus changes, use `addListener('focus', cb)` and `addListener('blur', cb)`.\n   * To conditionally render content based on focus state, use the `useIsFocused` hook.\n   */\n  isFocused(): boolean;\n\n  /**\n   * Check if dispatching back action will be handled by navigation.\n   * Note that this method doesn't re-render screen when the result changes. So don't use it in `render`.\n   */\n  canGoBack(): boolean;\n\n  /**\n   * Returns the name of the navigator specified in the `name` prop.\n   * If no name is specified, returns `undefined`.\n   */\n  getId(): string | undefined;\n\n  /**\n   * Returns the navigation helpers from a parent navigator based on the ID.\n   * If an ID is provided, the navigation helper from the parent navigator with matching ID (including current) will be returned.\n   * If no ID is provided, the navigation helper from the immediate parent navigator will be returned.\n   *\n   * @param id Optional ID of a parent navigator.\n   */\n  getParent<T = NavigationHelpers<ParamListBase> | undefined>(id?: string): T;\n\n  /**\n   * Returns the navigator's state.\n   * Note that this method doesn't re-render screen when the result changes. So don't use it in `render`.\n   */\n  getState(): State;\n} & PrivateValueStore<[ParamList, unknown, unknown]>;\n\nexport type NavigationHelpers<\n  ParamList extends ParamListBase,\n  EventMap extends EventMapBase = {}\n> = NavigationHelpersCommon<ParamList> &\n  EventEmitter<EventMap> & {\n    /**\n     * Update the param object for the route.\n     * The new params will be shallow merged with the old one.\n     *\n     * @param params Params object for the current route.\n     */\n    setParams<RouteName extends keyof ParamList>(\n      params: Partial<ParamList[RouteName]>\n    ): void;\n  };\n\nexport type NavigationContainerProps = {\n  /**\n   * Initial navigation state for the child navigators.\n   */\n  initialState?: InitialState;\n  /**\n   * Callback which is called with the latest navigation state when it changes.\n   */\n  onStateChange?: (state: NavigationState | undefined) => void;\n  /**\n   * Callback which is called when an action is not handled.\n   */\n  onUnhandledAction?: (action: NavigationAction) => void;\n  /**\n   * Whether this navigation container should be independent of parent containers.\n   * If this is not set to `true`, this container cannot be nested inside another container.\n   * Setting it to `true` disconnects any children navigators from parent container.\n   */\n  independent?: boolean;\n  /**\n   * Children elements to render.\n   */\n  children: React.ReactNode;\n};\n\nexport type NavigationProp<\n  ParamList extends {},\n  RouteName extends keyof ParamList = Keyof<ParamList>,\n  NavigatorID extends string | undefined = undefined,\n  State extends NavigationState = NavigationState<ParamList>,\n  ScreenOptions extends {} = {},\n  EventMap extends EventMapBase = {}\n> = Omit<NavigationHelpersCommon<ParamList, State>, 'getParent'> & {\n  /**\n   * Returns the navigation prop from a parent navigator based on the ID.\n   * If an ID is provided, the navigation prop from the parent navigator with matching ID (including current) will be returned.\n   * If no ID is provided, the navigation prop from the immediate parent navigator will be returned.\n   *\n   * @param id Optional ID of a parent navigator.\n   */\n  getParent<T = NavigationProp<ParamListBase> | undefined>(id?: NavigatorID): T;\n\n  /**\n   * Update the param object for the route.\n   * The new params will be shallow merged with the old one.\n   *\n   * @param params Params object for the current route.\n   */\n  setParams(\n    params: ParamList[RouteName] extends undefined\n      ? undefined\n      : Partial<ParamList[RouteName]>\n  ): void;\n\n  /**\n   * Update the options for the route.\n   * The options object will be shallow merged with default options object.\n   *\n   * @param options Options object for the route.\n   */\n  setOptions(options: Partial<ScreenOptions>): void;\n} & EventConsumer<EventMap & EventMapCore<State>> &\n  PrivateValueStore<[ParamList, RouteName, EventMap]>;\n\nexport type RouteProp<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList = Keyof<ParamList>\n> = Route<Extract<RouteName, string>, ParamList[RouteName]>;\n\nexport type CompositeNavigationProp<\n  A extends NavigationProp<ParamListBase, string, any, any, any>,\n  B extends NavigationHelpersCommon<ParamListBase, any>\n> = Omit<A & B, keyof NavigationProp<any>> &\n  NavigationProp<\n    /**\n     * Param list from both navigation objects needs to be combined\n     * For example, we should be able to navigate to screens in both A and B\n     */\n    (A extends NavigationHelpersCommon<infer T> ? T : never) &\n      (B extends NavigationHelpersCommon<infer U> ? U : never),\n    /**\n     * The route name should refer to the route name specified in the first type\n     * Ideally it should work for any of them, but it's not possible to infer that way\n     */\n    A extends NavigationProp<any, infer R> ? R : string,\n    /**\n     * ID from both navigation objects needs to be combined for `getParent`\n     */\n    | (A extends NavigationProp<any, any, infer I> ? I : never)\n    | (B extends NavigationProp<any, any, infer J> ? J : never),\n    /**\n     * The type of state should refer to the state specified in the first type\n     */\n    A extends NavigationProp<any, any, any, infer S> ? S : NavigationState,\n    /**\n     * Screen options from both navigation objects needs to be combined\n     * This allows typechecking `setOptions`\n     */\n    (A extends NavigationProp<any, any, any, any, infer O> ? O : {}) &\n      (B extends NavigationProp<any, any, any, any, infer P> ? P : {}),\n    /**\n     * Event consumer config should refer to the config specified in the first type\n     * This allows typechecking `addListener`/`removeListener`\n     */\n    A extends NavigationProp<any, any, any, any, any, infer E> ? E : {}\n  >;\n\nexport type CompositeScreenProps<\n  A extends {\n    navigation: NavigationProp<\n      ParamListBase,\n      string,\n      string | undefined,\n      any,\n      any,\n      any\n    >;\n    route: RouteProp<ParamListBase>;\n  },\n  B extends {\n    navigation: NavigationHelpersCommon<any, any>;\n  }\n> = {\n  navigation: CompositeNavigationProp<A['navigation'], B['navigation']>;\n  route: A['route'];\n};\n\nexport type Descriptor<\n  ScreenOptions extends {},\n  Navigation extends NavigationProp<any, any, any, any, any, any>,\n  Route extends RouteProp<any, any>\n> = {\n  /**\n   * Render the component associated with this route.\n   */\n  render(): JSX.Element;\n\n  /**\n   * Options for the route.\n   */\n  options: ScreenOptions;\n\n  /**\n   * Route object for the screen\n   */\n  route: Route;\n\n  /**\n   * Navigation object for the screen\n   */\n  navigation: Navigation;\n};\n\nexport type ScreenListeners<\n  State extends NavigationState,\n  EventMap extends EventMapBase\n> = Partial<{\n  [EventName in keyof (EventMap & EventMapCore<State>)]: EventListenerCallback<\n    EventMap & EventMapCore<State>,\n    EventName\n  >;\n}>;\n\ntype ScreenComponentType<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList\n> =\n  | React.ComponentType<{\n      route: RouteProp<ParamList, RouteName>;\n      navigation: any;\n    }>\n  | React.ComponentType<{}>;\n\nexport type RouteConfigComponent<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList\n> =\n  | {\n      /**\n       * React component to render for this screen.\n       */\n      component: ScreenComponentType<ParamList, RouteName>;\n      getComponent?: never;\n      children?: never;\n    }\n  | {\n      /**\n       * Lazily get a React component to render for this screen.\n       */\n      getComponent: () => ScreenComponentType<ParamList, RouteName>;\n      component?: never;\n      children?: never;\n    }\n  | {\n      /**\n       * Render callback to render content of this screen.\n       */\n      children: (props: {\n        route: RouteProp<ParamList, RouteName>;\n        navigation: any;\n      }) => React.ReactNode;\n      component?: never;\n      getComponent?: never;\n    };\n\nexport type RouteConfig<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList,\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  /**\n   * Optional key for this screen. This doesn't need to be unique.\n   * If the key changes, existing screens with this name will be removed or reset.\n   * Useful when we have some common screens and have conditional rendering.\n   */\n  navigationKey?: string;\n\n  /**\n   * Route name of this screen.\n   */\n  name: RouteName;\n\n  /**\n   * Navigator options for this screen.\n   */\n  options?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamList, RouteName>;\n        navigation: any;\n      }) => ScreenOptions);\n\n  /**\n   * Event listeners for this screen.\n   */\n  listeners?:\n    | ScreenListeners<State, EventMap>\n    | ((props: {\n        route: RouteProp<ParamList, RouteName>;\n        navigation: any;\n      }) => ScreenListeners<State, EventMap>);\n\n  /**\n   * Function to return an unique ID for this screen.\n   * Receives an object with the route params.\n   * For a given screen name, there will always be only one screen corresponding to an ID.\n   * If `undefined` is returned, it acts same as no `getId` being specified.\n   */\n  getId?: ({ params }: { params: ParamList[RouteName] }) => string | undefined;\n\n  /**\n   * Initial params object for the route.\n   */\n  initialParams?: Partial<ParamList[RouteName]>;\n} & RouteConfigComponent<ParamList, RouteName>;\n\nexport type RouteGroupConfig<\n  ParamList extends ParamListBase,\n  ScreenOptions extends {}\n> = {\n  /**\n   * Optional key for the screens in this group.\n   * If the key changes, all existing screens in this group will be removed or reset.\n   */\n  navigationKey?: string;\n\n  /**\n   * Navigator options for this screen.\n   */\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamList, keyof ParamList>;\n        navigation: any;\n      }) => ScreenOptions);\n  /**\n   * Children React Elements to extract the route configuration from.\n   * Only `Screen`, `Group` and `React.Fragment` are supported as children.\n   */\n  children: React.ReactNode;\n};\n\nexport type NavigationContainerEventMap = {\n  /**\n   * Event which fires when the navigation state changes.\n   */\n  state: {\n    data: {\n      /**\n       * The updated state object after the state change.\n       */\n      state: NavigationState | PartialState<NavigationState> | undefined;\n    };\n  };\n  /**\n   * Event which fires when current options changes.\n   */\n  options: { data: { options: object } };\n  /**\n   * Event which fires when an action is dispatched.\n   * Only intended for debugging purposes, don't use it for app logic.\n   * This event will be emitted before state changes have been applied.\n   */\n  __unsafe_action__: {\n    data: {\n      /**\n       * The action object which was dispatched.\n       */\n      action: NavigationAction;\n      /**\n       * Whether the action was a no-op, i.e. resulted any state changes.\n       */\n      noop: boolean;\n      /**\n       * Stack trace of the action, this will only be available during development.\n       */\n      stack: string | undefined;\n    };\n  };\n};\n\nexport type NavigationContainerRef<ParamList extends {}> =\n  NavigationHelpers<ParamList> &\n    EventConsumer<NavigationContainerEventMap> & {\n      /**\n       * Reset the navigation state of the root navigator to the provided state.\n       *\n       * @param state Navigation state object.\n       */\n      resetRoot(state?: PartialState<NavigationState> | NavigationState): void;\n      /**\n       * Get the rehydrated navigation state of the navigation tree.\n       */\n      getRootState(): NavigationState;\n      /**\n       * Get the currently focused navigation route.\n       */\n      getCurrentRoute(): Route<string> | undefined;\n      /**\n       * Get the currently focused route's options.\n       */\n      getCurrentOptions(): object | undefined;\n      /**\n       * Whether the navigation container is ready to handle actions.\n       */\n      isReady(): boolean;\n      /**\n       * Stub function for setOptions on navigation object for use with useNavigation.\n       */\n      setOptions(): never;\n      /**\n       * Stub function for getParent on navigation object for use with useNavigation.\n       */\n      getParent(): undefined;\n    };\n\nexport type NavigationContainerRefWithCurrent<ParamList extends {}> =\n  NavigationContainerRef<ParamList> & {\n    current: NavigationContainerRef<ParamList> | null;\n  };\n\nexport type TypedNavigator<\n  ParamList extends ParamListBase,\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n  Navigator extends React.ComponentType<any>\n> = {\n  /**\n   * Navigator component which manages the child screens.\n   */\n  Navigator: React.ComponentType<\n    Omit<\n      React.ComponentProps<Navigator>,\n      keyof DefaultNavigatorOptions<any, any, any, any>\n    > &\n      DefaultNavigatorOptions<ParamList, State, ScreenOptions, EventMap>\n  >;\n  /**\n   * Component used for grouping multiple route configuration.\n   */\n  Group: React.ComponentType<RouteGroupConfig<ParamList, ScreenOptions>>;\n  /**\n   * Component used for specifying route configuration.\n   */\n  Screen: <RouteName extends keyof ParamList>(\n    _: RouteConfig<ParamList, RouteName, State, ScreenOptions, EventMap>\n  ) => null;\n};\n\nexport type NavigatorScreenParams<\n  ParamList,\n  State extends NavigationState = NavigationState\n> =\n  | {\n      screen?: never;\n      params?: never;\n      initial?: never;\n      path?: string;\n      state: PartialState<State> | State | undefined;\n    }\n  | {\n      [RouteName in keyof ParamList]: undefined extends ParamList[RouteName]\n        ? {\n            screen: RouteName;\n            params?: ParamList[RouteName];\n            initial?: boolean;\n            path?: string;\n            state?: never;\n          }\n        : {\n            screen: RouteName;\n            params: ParamList[RouteName];\n            initial?: boolean;\n            path?: string;\n            state?: never;\n          };\n    }[keyof ParamList];\n\nexport type PathConfig<ParamList extends {}> = {\n  path?: string;\n  exact?: boolean;\n  parse?: Record<string, (value: string) => any>;\n  stringify?: Record<string, (value: any) => string>;\n  screens?: PathConfigMap<ParamList>;\n  initialRouteName?: keyof ParamList;\n};\n\nexport type PathConfigMap<ParamList extends {}> = {\n  [RouteName in keyof ParamList]?: NonNullable<\n    ParamList[RouteName]\n  > extends NavigatorScreenParams<infer T extends {}>\n    ? string | PathConfig<T>\n    : string | Omit<PathConfig<{}>, 'screens' | 'initialRouteName'>;\n};\n","import * as React from 'react';\n\nimport type { ListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add action listeners.\n */\nexport default function useChildListeners() {\n  const { current: listeners } = React.useRef<{\n    [K in keyof ListenerMap]: ListenerMap[K][];\n  }>({\n    action: [],\n    focus: [],\n  });\n\n  const addListener = React.useCallback(\n    <T extends keyof ListenerMap>(type: T, listener: ListenerMap[T]) => {\n      listeners[type].push(listener);\n\n      let removed = false;\n      return () => {\n        const index = listeners[type].indexOf(listener);\n\n        if (!removed && index > -1) {\n          removed = true;\n          listeners[type].splice(index, 1);\n        }\n      };\n    },\n    [listeners]\n  );\n\n  return {\n    listeners,\n    addListener,\n  };\n}\n","import * as React from 'react';\n\ntype Render = (children: React.ReactNode) => JSX.Element;\n\ntype Props = {\n  render: Render;\n  children: React.ReactNode;\n};\n\nconst NavigationContent = ({ render, children }: Props) => {\n  return render(children);\n};\n\nexport default function useComponent(render: Render) {\n  const renderRef = React.useRef<Render | null>(render);\n\n  // Normally refs shouldn't be mutated in render\n  // But we return a component which will be rendered\n  // So it's just for immediate consumption\n  renderRef.current = render;\n\n  React.useEffect(() => {\n    renderRef.current = null;\n  });\n\n  return React.useRef(({ children }: { children: React.ReactNode }) => {\n    const render = renderRef.current;\n\n    if (render === null) {\n      throw new Error(\n        'The returned component must be rendered in the same render phase as the hook.'\n      );\n    }\n\n    return <NavigationContent render={render}>{children}</NavigationContent>;\n  }).current;\n}\n","import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport CurrentRenderContext from './CurrentRenderContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  NavigationProp,\n  RouteProp,\n} from './types';\n\ntype Options = {\n  state: NavigationState;\n  navigation: NavigationHelpers<ParamListBase>;\n  descriptors: Record<\n    string,\n    Descriptor<object, NavigationProp<ParamListBase>, RouteProp<ParamListBase>>\n  >;\n};\n\n/**\n * Write the current options, so that server renderer can get current values\n * Mutating values like this is not safe in async mode, but it doesn't apply to SSR\n */\nexport default function useCurrentRender({\n  state,\n  navigation,\n  descriptors,\n}: Options) {\n  const current = React.useContext(CurrentRenderContext);\n\n  if (current && navigation.isFocused()) {\n    current.options = descriptors[state.routes[state.index].key].options;\n  }\n}\n","import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  AddKeyedListener,\n  AddListener,\n} from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  props: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n};\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?: ScreenOptionsOrCallback<ScreenOptions>;\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange, stackRef } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions, EventMap>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<\n          ParamListBase,\n          string,\n          string | undefined,\n          State,\n          ScreenOptions,\n          EventMap\n        > &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      options[route.key],\n    ];\n\n    const customOptions = optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          // @ts-expect-error: we check for function but TS still complains\n          typeof curr !== 'function' ? curr : curr({ route, navigation })\n        ),\n      {} as ScreenOptions\n    );\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: customOptions,\n          })\n        : defaultScreenOptions),\n      ...customOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n","import * as React from 'react';\n\nimport type { EventArg, EventConsumer, EventEmitter } from './types';\n\nexport type NavigationEventEmitter<T extends Record<string, any>> =\n  EventEmitter<T> & {\n    create: (target: string) => EventConsumer<T>;\n  };\n\ntype Listeners = ((e: any) => void)[];\n\n/**\n * Hook to manage the event system used by the navigator to notify screens of various events.\n */\nexport default function useEventEmitter<T extends Record<string, any>>(\n  listen?: (e: any) => void\n): NavigationEventEmitter<T> {\n  const listenRef = React.useRef(listen);\n\n  React.useEffect(() => {\n    listenRef.current = listen;\n  });\n\n  const listeners = React.useRef<Record<string, Record<string, Listeners>>>(\n    Object.create(null)\n  );\n\n  const create = React.useCallback((target: string) => {\n    const removeListener = (type: string, callback: (data: any) => void) => {\n      const callbacks = listeners.current[type]\n        ? listeners.current[type][target]\n        : undefined;\n\n      if (!callbacks) {\n        return;\n      }\n\n      const index = callbacks.indexOf(callback);\n\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    };\n\n    const addListener = (type: string, callback: (data: any) => void) => {\n      listeners.current[type] = listeners.current[type] || {};\n      listeners.current[type][target] = listeners.current[type][target] || [];\n      listeners.current[type][target].push(callback);\n\n      let removed = false;\n      return () => {\n        // Prevent removing other listeners when unsubscribing same listener multiple times\n        if (!removed) {\n          removed = true;\n          removeListener(type, callback);\n        }\n      };\n    };\n\n    return {\n      addListener,\n      removeListener,\n    };\n  }, []);\n\n  const emit = React.useCallback(\n    ({\n      type,\n      data,\n      target,\n      canPreventDefault,\n    }: {\n      type: string;\n      data?: any;\n      target?: string;\n      canPreventDefault?: boolean;\n    }) => {\n      const items = listeners.current[type] || {};\n\n      // Copy the current list of callbacks in case they are mutated during execution\n      const callbacks =\n        target !== undefined\n          ? items[target]?.slice()\n          : ([] as Listeners)\n              .concat(...Object.keys(items).map((t) => items[t]))\n              .filter((cb, i, self) => self.lastIndexOf(cb) === i);\n\n      const event: EventArg<any, any, any> = {\n        get type() {\n          return type;\n        },\n      };\n\n      if (target !== undefined) {\n        Object.defineProperty(event, 'target', {\n          enumerable: true,\n          get() {\n            return target;\n          },\n        });\n      }\n\n      if (data !== undefined) {\n        Object.defineProperty(event, 'data', {\n          enumerable: true,\n          get() {\n            return data;\n          },\n        });\n      }\n\n      if (canPreventDefault) {\n        let defaultPrevented = false;\n\n        Object.defineProperties(event, {\n          defaultPrevented: {\n            enumerable: true,\n            get() {\n              return defaultPrevented;\n            },\n          },\n          preventDefault: {\n            enumerable: true,\n            value() {\n              defaultPrevented = true;\n            },\n          },\n        });\n      }\n\n      listenRef.current?.(event);\n\n      callbacks?.forEach((cb) => cb(event));\n\n      return event as any;\n    },\n    []\n  );\n\n  return React.useMemo(() => ({ create, emit }), [create, emit]);\n}\n","import * as React from 'react';\n\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect: EffectCallback) {\n  const navigation = useNavigation();\n\n  if (arguments[1] !== undefined) {\n    const message =\n      \"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \" +\n      \"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\" +\n      'useFocusEffect(\\n' +\n      '  React.useCallback(() => {\\n' +\n      '    // Your code here\\n' +\n      '  }, [depA, depB])\\n' +\n      ');\\n\\n' +\n      'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n\n    console.error(message);\n  }\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    const callback = () => {\n      const destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        let message =\n          'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          message +=\n            \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof (destroy as any).then === 'function') {\n          message +=\n            \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" +\n            'Instead, write the async function inside your effect ' +\n            'and call it immediately:\\n\\n' +\n            'useFocusEffect(\\n' +\n            '  React.useCallback(() => {\\n' +\n            '    async function fetchData() {\\n' +\n            '      // You can await here\\n' +\n            '      const response = await MyAPI.getData(someId);\\n' +\n            '      // ...\\n' +\n            '    }\\n\\n' +\n            '    fetchData();\\n' +\n            '  }, [someId])\\n' +\n            ');\\n\\n' +\n            'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += ` You returned '${JSON.stringify(destroy)}'.`;\n        }\n\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n","import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n","import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(\n    () => addListener?.('focus', listener),\n    [addListener, listener]\n  );\n}\n","import * as React from 'react';\nimport { useState } from 'react';\n\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n","import * as React from 'react';\n\nimport type { KeyedListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add getters to be called for obtaining rehydrated state.\n */\nexport default function useKeyedChildListeners() {\n  const { current: keyedListeners } = React.useRef<{\n    [K in keyof KeyedListenerMap]: Record<\n      string,\n      KeyedListenerMap[K] | undefined\n    >;\n  }>(\n    Object.assign(Object.create(null), {\n      getState: {},\n      beforeRemove: {},\n    })\n  );\n\n  const addKeyedListener = React.useCallback(\n    <T extends keyof KeyedListenerMap>(\n      type: T,\n      key: string,\n      listener: KeyedListenerMap[T]\n    ) => {\n      // @ts-expect-error: according to ref stated above you can use `key` to index type\n      keyedListeners[type][key] = listener;\n\n      return () => {\n        // @ts-expect-error: according to ref stated above you can use `key` to index type\n        keyedListeners[type][key] = undefined;\n      };\n    },\n    [keyedListeners]\n  );\n\n  return {\n    keyedListeners,\n    addKeyedListener,\n  };\n}\n","import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport type { NavigationProp } from './types';\n\n/**\n * Hook to access the navigation prop of the parent screen anywhere.\n *\n * @returns Navigation prop of the parent screen.\n */\nexport default function useNavigation<\n  T = Omit<NavigationProp<ReactNavigation.RootParamList>, 'getState'> & {\n    getState(): NavigationState | undefined;\n  }\n>(): T {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationContext);\n\n  if (navigation === undefined && root === undefined) {\n    throw new Error(\n      \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n    );\n  }\n\n  // FIXME: Figure out a better way to do this\n  return (navigation ?? root) as unknown as T;\n}\n","import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport PreventRemoveProvider from './PreventRemoveProvider';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigationBuilderOptions<ScreenOptions extends {}> = {\n  /**\n   * Default options specified by the navigator.\n   * It receives the custom options in the arguments if a function is specified.\n   */\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n};\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props != null &&\n              typeof child.props === 'object' &&\n              'name' in child.props &&\n              child.props?.name\n                ? ` for the screen '${child.props.name}'`\n                : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    NavigationBuilderOptions<ScreenOptions> &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState>) =>\n      state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent((children: React.ReactNode) => (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <PreventRemoveProvider>{children}</PreventRemoveProvider>\n    </NavigationHelpersContext.Provider>\n  ));\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n","import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions,\n    EventMap\n  >\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        getParent: (id?: string) => {\n          if (id !== undefined && id === rest.getId()) {\n            // If the passed id is the same as the current navigation id,\n            // we return the cached navigation object for the relevant route\n            return acc[route.key];\n          }\n\n          return rest.getParent(id);\n        },\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n","import * as React from 'react';\n\nimport createNavigationContainerRef from './createNavigationContainerRef';\nimport type { NavigationContainerRefWithCurrent } from './types';\n\nexport default function useNavigationContainerRef<\n  ParamList extends {} = ReactNavigation.RootParamList\n>(): NavigationContainerRefWithCurrent<ParamList> {\n  const navigation =\n    React.useRef<NavigationContainerRefWithCurrent<ParamList> | null>(null);\n\n  if (navigation.current == null) {\n    navigation.current = createNavigationContainerRef<ParamList>();\n  }\n\n  return navigation.current;\n}\n","import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport { NavigationHelpers, PrivateValueStore } from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype Options<State extends NavigationState, Action extends NavigationAction> = {\n  id: string | undefined;\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  emitter: NavigationEventEmitter<any>;\n  router: Router<State, Action>;\n};\n\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\nexport default function useNavigationHelpers<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  Action extends NavigationAction,\n  EventMap extends Record<string, any>\n>({\n  id: navigatorId,\n  onAction,\n  getState,\n  emitter,\n  router,\n}: Options<State, Action>) {\n  const onUnhandledAction = React.useContext(UnhandledActionContext);\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n\n  return React.useMemo(() => {\n    const dispatch = (op: Action | ((state: State) => Action)) => {\n      const action = typeof op === 'function' ? op(getState()) : op;\n\n      const handled = onAction(action);\n\n      if (!handled) {\n        onUnhandledAction?.(action);\n      }\n    };\n\n    const actions = {\n      ...router.actionCreators,\n      ...CommonActions,\n    };\n\n    const helpers = Object.keys(actions).reduce((acc, name) => {\n      // @ts-expect-error: name is a valid key, but TypeScript is dumb\n      acc[name] = (...args: any) => dispatch(actions[name](...args));\n      return acc;\n    }, {} as ActionHelpers);\n\n    const navigationHelpers = {\n      ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers\n        ? parentNavigationHelpers.isFocused\n        : () => true,\n      canGoBack: () => {\n        const state = getState();\n\n        return (\n          router.getStateForAction(state, CommonActions.goBack() as Action, {\n            routeNames: state.routeNames,\n            routeParamList: {},\n            routeGetIdList: {},\n          }) !== null ||\n          parentNavigationHelpers?.canGoBack() ||\n          false\n        );\n      },\n      getId: () => navigatorId,\n      getParent: (id?: string) => {\n        if (id !== undefined) {\n          let current = navigationHelpers;\n\n          while (current && id !== current.getId()) {\n            current = current.getParent();\n          }\n\n          return current;\n        }\n\n        return parentNavigationHelpers;\n      },\n      getState,\n    } as NavigationHelpers<ParamListBase, EventMap> & ActionHelpers;\n\n    return navigationHelpers;\n  }, [\n    navigatorId,\n    emitter.emit,\n    getState,\n    onAction,\n    onUnhandledAction,\n    parentNavigationHelpers,\n    router,\n  ]);\n}\n","import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\nimport useNavigation from './useNavigation';\n\ntype Selector<ParamList extends ParamListBase, T> = (\n  state: NavigationState<ParamList>\n) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<ParamList extends ParamListBase, T>(\n  selector: Selector<ParamList, T>\n): T {\n  const navigation = useNavigation<NavigationProp<ParamList>>();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.getState());\n}\n","import type {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  actionListeners: ChildActionListener[];\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n  routerConfigOptions: RouterConfigOptions;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  actionListeners,\n  beforeRemoveListeners,\n  routerConfigOptions,\n  emitter,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef =\n    React.useRef<RouterConfigOptions>(routerConfigOptions);\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target !== 'string' || action.target === state.key) {\n        let result = router.getStateForAction(\n          state,\n          action,\n          routerConfigOptionsRef.current\n        );\n\n        // If a target is specified and set to current navigator, the action shouldn't bubble\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\n        result =\n          result === null && action.target === state.key ? state : result;\n\n        if (result !== null) {\n          onDispatchAction(action, state === result);\n\n          if (state !== result) {\n            const isPrevented = shouldPreventRemove(\n              emitter,\n              beforeRemoveListeners,\n              state.routes,\n              result.routes,\n              action\n            );\n\n            if (isPrevented) {\n              return true;\n            }\n\n            setState(result);\n          }\n\n          if (onRouteFocusParent !== undefined) {\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n            // This means we need to focus all of the parent navigators of this navigator as well\n            const shouldFocus = router.shouldActionChangeFocus(action);\n\n            if (shouldFocus && key !== undefined) {\n              onRouteFocusParent(key);\n            }\n          }\n\n          return true;\n        }\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = actionListeners.length - 1; i >= 0; i--) {\n        const listener = actionListeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      actionListeners,\n      beforeRemoveListeners,\n      emitter,\n      getState,\n      key,\n      onActionParent,\n      onDispatchAction,\n      onRouteFocusParent,\n      router,\n      setState,\n    ]\n  );\n\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners,\n  });\n\n  React.useEffect(\n    () => addListenerParent?.('action', onAction),\n    [addListenerParent, onAction]\n  );\n\n  return onAction;\n}\n","import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport isArrayEqual from './isArrayEqual';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n","import type {\n  NavigationAction,\n  NavigationState,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  currentRoutes: { key: string }[],\n  nextRoutes: { key?: string | undefined }[],\n  action: NavigationAction\n) => {\n  const nextRouteKeys = nextRoutes.map((route) => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes\n    .filter((route) => !nextRouteKeys.includes(route.key))\n    .reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of removedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          [],\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n","import type {\n  NavigationAction,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\ntype Options<Action extends NavigationAction> = {\n  router: Router<NavigationState, Action>;\n  getState: () => NavigationState;\n  setState: (state: NavigationState) => void;\n  key?: string;\n};\n\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus<Action extends NavigationAction>({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState,\n}: Options<Action>) {\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  return React.useCallback(\n    (key: string) => {\n      const state = getState();\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (result !== state) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n        onRouteFocusParent(sourceRouteKey);\n      }\n    },\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\n  );\n}\n","import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type { NavigationProp } from './types';\n\ntype Options = {\n  key?: string;\n  navigation?: NavigationProp<ParamListBase>;\n  options?: object | undefined;\n};\n\nexport default function useOptionsGetters({\n  key,\n  options,\n  navigation,\n}: Options) {\n  const optionsRef = React.useRef<object | undefined>(options);\n  const optionsGettersFromChildRef = React.useRef<\n    Record<string, () => object | undefined | null>\n  >({});\n\n  const { onOptionsChange } = React.useContext(NavigationBuilderContext);\n  const { addOptionsGetter: parentAddOptionsGetter } = React.useContext(\n    NavigationStateContext\n  );\n\n  const optionsChangeListener = React.useCallback(() => {\n    const isFocused = navigation?.isFocused() ?? true;\n    const hasChildren = Object.keys(optionsGettersFromChildRef.current).length;\n\n    if (isFocused && !hasChildren) {\n      onOptionsChange(optionsRef.current ?? {});\n    }\n  }, [navigation, onOptionsChange]);\n\n  React.useEffect(() => {\n    optionsRef.current = options;\n    optionsChangeListener();\n\n    return navigation?.addListener('focus', optionsChangeListener);\n  }, [navigation, options, optionsChangeListener]);\n\n  const getOptionsFromListener = React.useCallback(() => {\n    for (let key in optionsGettersFromChildRef.current) {\n      if (optionsGettersFromChildRef.current.hasOwnProperty(key)) {\n        const result = optionsGettersFromChildRef.current[key]?.();\n\n        // null means unfocused route\n        if (result !== null) {\n          return result;\n        }\n      }\n    }\n\n    return null;\n  }, []);\n\n  const getCurrentOptions = React.useCallback(() => {\n    const isFocused = navigation?.isFocused() ?? true;\n\n    if (!isFocused) {\n      return null;\n    }\n\n    const optionsFromListener = getOptionsFromListener();\n\n    if (optionsFromListener !== null) {\n      return optionsFromListener;\n    }\n\n    return optionsRef.current;\n  }, [navigation, getOptionsFromListener]);\n\n  React.useEffect(() => {\n    return parentAddOptionsGetter?.(key!, getCurrentOptions);\n  }, [getCurrentOptions, parentAddOptionsGetter, key]);\n\n  const addOptionsGetter = React.useCallback(\n    (key: string, getter: () => object | undefined | null) => {\n      optionsGettersFromChildRef.current[key] = getter;\n      optionsChangeListener();\n\n      return () => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete optionsGettersFromChildRef.current[key];\n        optionsChangeListener();\n      };\n    },\n    [optionsChangeListener]\n  );\n\n  return {\n    addOptionsGetter,\n    getCurrentOptions,\n  };\n}\n","import type { NavigationAction } from '@react-navigation/routers';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport type { EventListenerCallback, EventMapCore } from './types';\nimport useNavigation from './useNavigation';\nimport usePreventRemoveContext from './usePreventRemoveContext';\nimport useRoute from './useRoute';\n\n/**\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\n *\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\n * @param callback Function which is executed when screen was prevented from being removed.\n */\nexport default function usePreventRemove(\n  preventRemove: boolean,\n  callback: (options: { data: { action: NavigationAction } }) => void\n) {\n  const [id] = React.useState(() => nanoid());\n\n  const navigation = useNavigation();\n  const { key: routeKey } = useRoute();\n\n  const { setPreventRemove } = usePreventRemoveContext();\n\n  React.useEffect(() => {\n    setPreventRemove(id, routeKey, preventRemove);\n    return () => {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n\n  const beforeRemoveListener = useLatestCallback<\n    EventListenerCallback<EventMapCore<any>, 'beforeRemove'>\n  >((e) => {\n    if (!preventRemove) {\n      return;\n    }\n\n    e.preventDefault();\n\n    callback({ data: e.data });\n  });\n\n  React.useEffect(\n    () => navigation?.addListener('beforeRemove', beforeRemoveListener),\n    [navigation, beforeRemoveListener]\n  );\n}\n","import * as React from 'react';\n\nimport PreventRemoveContext from './PreventRemoveContext';\n\nexport default function usePreventRemoveContext() {\n  const value = React.useContext(PreventRemoveContext);\n\n  if (value == null) {\n    throw new Error(\n      \"Couldn't find the prevent remove context. Is your component inside NavigationContent?\"\n    );\n  }\n\n  return value;\n}\n","import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\n\nimport { SingleNavigatorContext } from './EnsureSingleNavigator';\n\n/**\n * Register a navigator in the parent context (either a navigation container or a screen).\n * This is used to prevent multiple navigators under a single container or screen.\n */\nexport default function useRegisterNavigator() {\n  const [key] = React.useState(() => nanoid());\n  const container = React.useContext(SingleNavigatorContext);\n\n  if (container === undefined) {\n    throw new Error(\n      \"Couldn't register the navigator. Have you wrapped your app with 'NavigationContainer'?\\n\\nThis can also happen if there are multiple copies of '@react-navigation' packages installed.\"\n    );\n  }\n\n  React.useEffect(() => {\n    const { register, unregister } = container;\n\n    register(key);\n\n    return () => unregister(key);\n  }, [container, key]);\n\n  return key;\n}\n","import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { RouteProp } from './types';\n\n/**\n * Hook to access the route prop of the parent screen anywhere.\n *\n * @returns Route prop of the parent screen.\n */\nexport default function useRoute<T extends RouteProp<ParamListBase>>(): T {\n  const route = React.useContext(NavigationRouteContext);\n\n  if (route === undefined) {\n    throw new Error(\n      \"Couldn't find a route object. Is your component inside a screen in a navigator?\"\n    );\n  }\n\n  return route as T;\n}\n","import type {\n  NavigationState,\n  ParamListBase,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { RouteProp } from './types';\n\ntype RouteCache = Map<Route<string>, RouteProp<ParamListBase>>;\n\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const CHILD_STATE = Symbol('CHILD_STATE');\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache<State extends NavigationState>(\n  routes: State['routes']\n) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({ current: new Map() as RouteCache }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const { state, ...proxy } = route;\n\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state,\n      });\n\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map() as RouteCache);\n\n  return Array.from(cache.current.values());\n}\n","import * as React from 'react';\n\nconst MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\n\nexport const ScheduleUpdateContext = React.createContext<{\n  scheduleUpdate: (callback: () => void) => void;\n  flushUpdates: () => void;\n}>({\n  scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n});\n\n/**\n * When screen config changes, we want to update the navigator in the same update phase.\n * However, navigation state is in the root component and React won't let us update it from a child.\n * This is a workaround for that, the scheduled update is stored in the ref without actually calling setState.\n * It lets all subsequent updates access the latest state so it stays correct.\n * Then we call setState during after the component updates.\n */\nexport default function useScheduleUpdate(callback: () => void) {\n  const { scheduleUpdate, flushUpdates } = React.useContext(\n    ScheduleUpdateContext\n  );\n\n  scheduleUpdate(callback);\n\n  React.useEffect(flushUpdates);\n}\n","import * as React from 'react';\n\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState<T>(initialState?: (() => T) | T) {\n  const stateRef = React.useRef<T>(UNINTIALIZED_STATE as any);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n      // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n      typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n\n  const getState = React.useCallback(() => stateRef.current, []);\n\n  const setState = React.useCallback((state: T) => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n\n  const scheduleUpdate = React.useCallback((callback: () => void) => {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  const state = stateRef.current;\n\n  React.useDebugValue(state);\n\n  return [state, getState, setState, scheduleUpdate, flushUpdates] as const;\n}\n","const formatToList = (items: string[]) =>\n  items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(\n    (key) => !validKeys.includes(key)\n  );\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n","import type { NavigationAction } from '@react-navigation/core';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform, Text, TextProps } from 'react-native';\n\nimport useLinkProps from './useLinkProps';\nimport type { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (Omit<TextProps, 'disabled'> & {\n  disabled?: boolean | null;\n  children: React.ReactNode;\n});\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link<ParamList extends ReactNavigation.RootParamList>({\n  to,\n  action,\n  ...rest\n}: Props<ParamList>) {\n  const props = useLinkProps<ParamList>({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n","import type { ParamListBase } from '@react-navigation/core';\nimport * as React from 'react';\n\nimport type { LinkingOptions } from './types';\n\nconst LinkingContext = React.createContext<{\n  options: LinkingOptions<ParamListBase> | undefined;\n}>({ options: undefined });\n\nLinkingContext.displayName = 'LinkingContext';\n\nexport default LinkingContext;\n","import {\n  BaseNavigationContainer,\n  getActionFromState,\n  getPathFromState,\n  getStateFromPath,\n  NavigationContainerProps,\n  NavigationContainerRef,\n  ParamListBase,\n  validatePathConfig,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\nimport DefaultTheme from './theming/DefaultTheme';\nimport ThemeProvider from './theming/ThemeProvider';\nimport type { DocumentTitleOptions, LinkingOptions, Theme } from './types';\nimport useBackButton from './useBackButton';\nimport useDocumentTitle from './useDocumentTitle';\nimport useLinking from './useLinking';\nimport useThenable from './useThenable';\n\ndeclare global {\n  var REACT_NAVIGATION_DEVTOOLS: WeakMap<\n    NavigationContainerRef<any>,\n    { readonly linking: LinkingOptions<any> }\n  >;\n}\n\nglobal.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\n\ntype Props<ParamList extends {}> = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions<ParamList>;\n  fallback?: React.ReactNode;\n  documentTitle?: DocumentTitleOptions;\n  onReady?: () => void;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nfunction NavigationContainerInner(\n  {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  }: Props<ParamListBase>,\n  ref?: React.Ref<NavigationContainerRef<ParamListBase> | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  if (linking?.config) {\n    validatePathConfig(linking.config);\n  }\n\n  const refContainer =\n    React.useRef<NavigationContainerRef<ParamListBase>>(null);\n\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n\n  const { getInitialState } = useLinking(refContainer, {\n    independent: rest.independent,\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  // Add additional linking related info to the ref\n  // This will be used by the devtools\n  React.useEffect(() => {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          return {\n            ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: linking?.prefixes ?? [],\n            getStateFromPath: linking?.getStateFromPath ?? getStateFromPath,\n            getPathFromState: linking?.getPathFromState ?? getPathFromState,\n            getActionFromState:\n              linking?.getActionFromState ?? getActionFromState,\n          };\n        },\n      });\n    }\n  });\n\n  const [isResolved, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n\n  const onReadyRef = React.useRef(onReady);\n\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n\n  React.useEffect(() => {\n    if (isReady) {\n      onReadyRef.current?.();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n}\n\nconst NavigationContainer = React.forwardRef(NavigationContainerInner) as <\n  RootParamList extends {} = ReactNavigation.RootParamList\n>(\n  props: Props<RootParamList> & {\n    ref?: React.Ref<NavigationContainerRef<RootParamList>>;\n  }\n) => React.ReactElement;\n\nexport default NavigationContainer;\n","import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\n\nimport ServerContext, { ServerContextType } from './ServerContext';\nimport type { ServerContainerRef } from './types';\n\ntype Props = ServerContextType & {\n  children: React.ReactNode;\n};\n\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport default React.forwardRef(function ServerContainer(\n  { children, location }: Props,\n  ref: React.Ref<ServerContainerRef>\n) {\n  React.useEffect(() => {\n    console.error(\n      \"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\"\n    );\n  }, []);\n\n  const current: { options?: object } = {};\n\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      },\n    };\n\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n\n  return (\n    <ServerContext.Provider value={{ location }}>\n      <CurrentRenderContext.Provider value={current}>\n        {children}\n      </CurrentRenderContext.Provider>\n    </ServerContext.Provider>\n  );\n});\n","import * as React from 'react';\n\nexport type ServerContextType = {\n  location?: {\n    pathname: string;\n    search: string;\n  };\n};\n\nconst ServerContext = React.createContext<ServerContextType | undefined>(\n  undefined\n);\n\nexport default ServerContext;\n","import escapeStringRegexp from 'escape-string-regexp';\n\nexport default function extractPathFromURL(prefixes: string[], url: string) {\n  for (const prefix of prefixes) {\n    const protocol = prefix.match(/^[^:]+:/)?.[0] ?? '';\n    const host = prefix\n      .replace(new RegExp(`^${escapeStringRegexp(protocol)}`), '')\n      .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n      .replace(/^\\//, ''); // Remove extra leading slash\n\n    const prefixRegex = new RegExp(\n      `^${escapeStringRegexp(protocol)}(/)*${host\n        .split('.')\n        .map((it) => (it === '*' ? '[^/]+' : escapeStringRegexp(it)))\n        .join('\\\\.')}`\n    );\n\n    const [originAndPath, searchParams] = url.split('?');\n    const normalizedURL = originAndPath\n      .replace(/\\/+/g, '/')\n      .concat(searchParams ? `?${searchParams}` : '');\n\n    if (prefixRegex.test(normalizedURL)) {\n      return normalizedURL.replace(prefixRegex, '');\n    }\n  }\n\n  return undefined;\n}\n","export { default as Link } from './Link';\nexport { default as LinkingContext } from './LinkingContext';\nexport { default as NavigationContainer } from './NavigationContainer';\nexport { default as ServerContainer } from './ServerContainer';\nexport { default as DarkTheme } from './theming/DarkTheme';\nexport { default as DefaultTheme } from './theming/DefaultTheme';\nexport { default as ThemeProvider } from './theming/ThemeProvider';\nexport { default as useTheme } from './theming/useTheme';\nexport * from './types';\nexport { default as useLinkBuilder } from './useLinkBuilder';\nexport { default as useLinkProps } from './useLinkProps';\nexport { default as useLinkTo } from './useLinkTo';\nexport { default as useScrollToTop } from './useScrollToTop';\nexport * from '@react-navigation/core';\n","import type { Theme } from '../types';\n\nconst DarkTheme: Theme = {\n  dark: true,\n  colors: {\n    primary: 'rgb(10, 132, 255)',\n    background: 'rgb(1, 1, 1)',\n    card: 'rgb(18, 18, 18)',\n    text: 'rgb(229, 229, 231)',\n    border: 'rgb(39, 39, 41)',\n    notification: 'rgb(255, 69, 58)',\n  },\n};\n\nexport default DarkTheme;\n","import type { Theme } from '../types';\n\nconst DefaultTheme: Theme = {\n  dark: false,\n  colors: {\n    primary: 'rgb(0, 122, 255)',\n    background: 'rgb(242, 242, 242)',\n    card: 'rgb(255, 255, 255)',\n    text: 'rgb(28, 28, 30)',\n    border: 'rgb(216, 216, 216)',\n    notification: 'rgb(255, 59, 48)',\n  },\n};\n\nexport default DefaultTheme;\n","import * as React from 'react';\n\nimport type { Theme } from '../types';\nimport DefaultTheme from './DefaultTheme';\n\nconst ThemeContext = React.createContext<Theme>(DefaultTheme);\n\nThemeContext.displayName = 'ThemeContext';\n\nexport default ThemeContext;\n","import * as React from 'react';\n\nimport type { Theme } from '../types';\nimport ThemeContext from './ThemeContext';\n\ntype Props = {\n  value: Theme;\n  children: React.ReactNode;\n};\n\nexport default function ThemeProvider({ value, children }: Props) {\n  return (\n    <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>\n  );\n}\n","import * as React from 'react';\n\nimport ThemeContext from './ThemeContext';\n\nexport default function useTheme() {\n  const theme = React.useContext(ThemeContext);\n\n  return theme;\n}\n","import type {\n  NavigationContainerRef,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport { BackHandler } from 'react-native';\n\nexport default function useBackButton(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>\n) {\n  React.useEffect(() => {\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      () => {\n        const navigation = ref.current;\n\n        if (navigation == null) {\n          return false;\n        }\n\n        if (navigation.canGoBack()) {\n          navigation.goBack();\n\n          return true;\n        }\n\n        return false;\n      }\n    );\n\n    return () => subscription.remove();\n  }, [ref]);\n}\n","export default function useDocumentTitle() {\n  // Noop for React Native\n}\n","import {\n  getPathFromState,\n  NavigationHelpers,\n  NavigationHelpersContext,\n  NavigationProp,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\ntype NavigationObject =\n  | NavigationHelpers<ParamListBase>\n  | NavigationProp<ParamListBase>;\n\ntype MinimalState = {\n  index: number;\n  routes: { name: string; params?: object; state?: MinimalState }[];\n};\n\nconst getRootStateForNavigate = (\n  navigation: NavigationObject,\n  state: MinimalState\n): MinimalState => {\n  const parent = navigation.getParent();\n\n  if (parent) {\n    const parentState = parent.getState();\n\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [\n        {\n          ...parentState.routes[parentState.index],\n          state: state,\n        },\n      ],\n    });\n  }\n\n  return state;\n};\n\n/**\n * Build destination link for a navigate action.\n * Useful for showing anchor tags on the web for buttons that perform navigation.\n */\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n\n  const buildLink = React.useCallback(\n    (name: string, params?: object) => {\n      const { options } = linking;\n\n      if (options?.enabled === false) {\n        return undefined;\n      }\n\n      const state = navigation\n        ? getRootStateForNavigate(navigation, {\n            index: 0,\n            routes: [{ name, params }],\n          })\n        : // If we couldn't find a navigation object in context, we're at root\n          // So we'll construct a basic state object to use\n          {\n            index: 0,\n            routes: [{ name, params }],\n          };\n\n      const path = options?.getPathFromState\n        ? options.getPathFromState(state, options?.config)\n        : getPathFromState(state, options?.config);\n\n      return path;\n    },\n    [linking, navigation]\n  );\n\n  return buildLink;\n}\n","import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n","import {\n  getActionFromState,\n  getStateFromPath,\n  NavigationContainerRefContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\nexport type To<\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList\n> =\n  | string\n  | (undefined extends ParamList[RouteName]\n      ? {\n          screen: Extract<RouteName, string>;\n          params?: ParamList[RouteName];\n        }\n      : {\n          screen: Extract<RouteName, string>;\n          params: ParamList[RouteName];\n        });\n\nexport default function useLinkTo<\n  ParamList extends ReactNavigation.RootParamList\n>() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (to: To<ParamList>) => {\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n        );\n      }\n\n      if (typeof to !== 'string') {\n        // @ts-expect-error: This is fine\n        navigation.navigate(to.screen, to.params);\n        return;\n      }\n\n      if (!to.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${to}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(to, options.config)\n        : getStateFromPath(to, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n","import {\n  getActionFromState as getActionFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport { Linking, Platform } from 'react-native';\n\nimport extractPathFromURL from './extractPathFromURL';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    prefixes,\n    filter,\n    config,\n    getInitialURL = () =>\n      Promise.race([\n        Linking.getInitialURL(),\n        new Promise<undefined>((resolve) =>\n          // Timeout in 150ms if `getInitialState` doesn't resolve\n          // Workaround for https://github.com/facebook/react-native/issues/25675\n          setTimeout(resolve, 150)\n        ),\n      ]),\n    subscribe = (listener) => {\n      const callback = ({ url }: { url: string }) => listener(url);\n\n      const subscription = Linking.addEventListener('url', callback) as\n        | { remove(): void }\n        | undefined;\n\n      // Storing this in a local variable stops Jest from complaining about import after teardown\n      // @ts-expect-error: removeEventListener is not present in newer RN versions\n      const removeEventListener = Linking.removeEventListener?.bind(Linking);\n\n      return () => {\n        // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n        if (subscription?.remove) {\n          subscription.remove();\n        } else {\n          removeEventListener?.('url', callback);\n        }\n      };\n    },\n    getStateFromPath = getStateFromPathDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n          Platform.OS === 'android'\n            ? \"- You have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple instances\"\n            : '',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const prefixesRef = React.useRef(prefixes);\n  const filterRef = React.useRef(filter);\n  const configRef = React.useRef(config);\n  const getInitialURLRef = React.useRef(getInitialURL);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    prefixesRef.current = prefixes;\n    filterRef.current = filter;\n    configRef.current = config;\n    getInitialURLRef.current = getInitialURL;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const getStateFromURL = React.useCallback(\n    (url: string | null | undefined) => {\n      if (!url || (filterRef.current && !filterRef.current(url))) {\n        return undefined;\n      }\n\n      const path = extractPathFromURL(prefixesRef.current, url);\n\n      return path !== undefined\n        ? getStateFromPathRef.current(path, configRef.current)\n        : undefined;\n    },\n    []\n  );\n\n  const getInitialState = React.useCallback(() => {\n    let state: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const url = getInitialURLRef.current();\n\n      if (url != null && typeof url !== 'string') {\n        return url.then((url) => {\n          const state = getStateFromURL(url);\n\n          return state;\n        });\n      }\n\n      state = getStateFromURL(url);\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(state) : state);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n  }, [getStateFromURL]);\n\n  React.useEffect(() => {\n    const listener = (url: string) => {\n      if (!enabled) {\n        return;\n      }\n\n      const navigation = ref.current;\n      const state = navigation ? getStateFromURL(url) : undefined;\n\n      if (navigation && state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        const action = getActionFromStateRef.current(state, configRef.current);\n\n        if (action !== undefined) {\n          try {\n            navigation.dispatch(action);\n          } catch (e) {\n            // Ignore any errors from deep linking.\n            // This could happen in case of malformed links, navigation object not being initialized etc.\n            console.warn(\n              `An error occurred when trying to handle the link '${url}': ${\n                typeof e === 'object' && e != null && 'message' in e\n                  ? e.message\n                  : e\n              }`\n            );\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      }\n    };\n\n    return subscribe(listener);\n  }, [enabled, getStateFromURL, ref, subscribe]);\n\n  return {\n    getInitialState,\n  };\n}\n","import {\n  EventArg,\n  NavigationContext,\n  NavigationProp,\n  ParamListBase,\n  useRoute,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport type { ScrollView } from 'react-native';\n\ntype ScrollOptions = { x?: number; y?: number; animated?: boolean };\n\ntype ScrollableView =\n  | { scrollToTop(): void }\n  | { scrollTo(options: ScrollOptions): void }\n  | { scrollToOffset(options: { offset?: number; animated?: boolean }): void }\n  | { scrollResponderScrollTo(options: ScrollOptions): void };\n\ntype ScrollableWrapper =\n  | { getScrollResponder(): React.ReactNode | ScrollView }\n  | { getNode(): ScrollableView }\n  | ScrollableView;\n\nfunction getScrollableNode(ref: React.RefObject<ScrollableWrapper>) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if (\n    'scrollToTop' in ref.current ||\n    'scrollTo' in ref.current ||\n    'scrollToOffset' in ref.current ||\n    'scrollResponderScrollTo' in ref.current\n  ) {\n    // This is already a scrollable node.\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    // If the view is a wrapper like FlatList, SectionList etc.\n    // We need to use `getScrollResponder` to get access to the scroll responder\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n    // we need to use `getNode` to get the ref to the actual scrollview.\n    // Note that `getNode` is deprecated in newer versions of react-native\n    // this is why we check if we already have a scrollable node above.\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(\n  ref: React.RefObject<ScrollableWrapper>\n) {\n  const navigation = React.useContext(NavigationContext);\n  const route = useRoute();\n\n  if (navigation === undefined) {\n    throw new Error(\n      \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n    );\n  }\n\n  React.useEffect(() => {\n    const tabNavigations: NavigationProp<ParamListBase>[] = [];\n    let currentNavigation = navigation;\n    // If the screen is nested inside multiple tab navigators, we should scroll to top for any of them\n    // So we need to find all the parent tab navigators and add the listeners there\n    while (currentNavigation) {\n      if (currentNavigation.getState().type === 'tab') {\n        tabNavigations.push(currentNavigation);\n      }\n\n      currentNavigation = currentNavigation.getParent();\n    }\n\n    if (tabNavigations.length === 0) {\n      return;\n    }\n\n    const unsubscribers = tabNavigations.map((tab) => {\n      return tab.addListener(\n        // We don't wanna import tab types here to avoid extra deps\n        // in addition, there are multiple tab implementations\n        // @ts-expect-error\n        'tabPress',\n        (e: EventArg<'tabPress', true>) => {\n          // We should scroll to top only when the screen is focused\n          const isFocused = navigation.isFocused();\n\n          // In a nested stack navigator, tab press resets the stack to first screen\n          // So we should scroll to top only when we are on first screen\n          const isFirst =\n            tabNavigations.includes(navigation) ||\n            navigation.getState().routes[0].key === route.key;\n\n          // Run the operation in the next frame so we're sure all listeners have been run\n          // This is necessary to know if preventDefault() has been called\n          requestAnimationFrame(() => {\n            const scrollable = getScrollableNode(ref) as ScrollableWrapper;\n\n            if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n              if ('scrollToTop' in scrollable) {\n                scrollable.scrollToTop();\n              } else if ('scrollTo' in scrollable) {\n                scrollable.scrollTo({ y: 0, animated: true });\n              } else if ('scrollToOffset' in scrollable) {\n                scrollable.scrollToOffset({ offset: 0, animated: true });\n              } else if ('scrollResponderScrollTo' in scrollable) {\n                scrollable.scrollResponderScrollTo({ y: 0, animated: true });\n              }\n            }\n          });\n        }\n      );\n    });\n\n    return () => {\n      unsubscribers.forEach((unsubscribe) => unsubscribe());\n    };\n  }, [navigation, ref, route.key]);\n}\n","import * as React from 'react';\n\nexport default function useThenable<T>(create: () => PromiseLike<T>) {\n  const [promise] = React.useState(create);\n\n  let initialState: [boolean, T | undefined] = [false, undefined];\n\n  // Check if our thenable is synchronous\n  promise.then((result) => {\n    initialState = [true, result];\n  });\n\n  const [state, setState] = React.useState(initialState);\n  const [resolved] = state;\n\n  React.useEffect(() => {\n    let cancelled = false;\n\n    const resolve = async () => {\n      let result;\n\n      try {\n        result = await promise;\n      } finally {\n        if (!cancelled) {\n          setState([true, result]);\n        }\n      }\n    };\n\n    if (!resolved) {\n      resolve();\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n\n  return state;\n}\n","import { nanoid } from 'nanoid/non-secure';\n\nimport type {\n  CommonNavigationAction,\n  NavigationState,\n  PartialState,\n} from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n","import type { NavigationState, PartialState, Route } from './types';\n\ntype ResetState =\n  | PartialState<NavigationState>\n  | NavigationState\n  | (Omit<NavigationState, 'routes'> & {\n      routes: Omit<Route<string>, 'key'>[];\n    });\n\nexport type Action =\n  | {\n      type: 'GO_BACK';\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'NAVIGATE';\n      payload:\n        | {\n            key: string;\n            name?: undefined;\n            params?: object;\n            path?: string;\n            merge?: boolean;\n          }\n        | {\n            name: string;\n            key?: string;\n            params?: object;\n            path?: string;\n            merge?: boolean;\n          };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'RESET';\n      payload: ResetState | undefined;\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'SET_PARAMS';\n      payload: { params?: object };\n      source?: string;\n      target?: string;\n    };\n\nexport function goBack(): Action {\n  return { type: 'GO_BACK' };\n}\n\nexport function navigate(\n  options:\n    | { key: string; params?: object; path?: string; merge?: boolean }\n    | {\n        name: string;\n        key?: string;\n        params?: object;\n        path?: string;\n        merge?: boolean;\n      }\n): Action;\n// eslint-disable-next-line no-redeclare\nexport function navigate(name: string, params?: object): Action;\n// eslint-disable-next-line no-redeclare\nexport function navigate(...args: any): Action {\n  if (typeof args[0] === 'string') {\n    return { type: 'NAVIGATE', payload: { name: args[0], params: args[1] } };\n  } else {\n    const payload = args[0] || {};\n\n    if (!payload.hasOwnProperty('key') && !payload.hasOwnProperty('name')) {\n      throw new Error(\n        'You need to specify name or key when calling navigate with an object as the argument. See https://reactnavigation.org/docs/navigation-actions#navigate for usage.'\n      );\n    }\n\n    return { type: 'NAVIGATE', payload };\n  }\n}\n\nexport function reset(state: ResetState | undefined): Action {\n  return { type: 'RESET', payload: state };\n}\n\nexport function setParams(params: object): Action {\n  return { type: 'SET_PARAMS', payload: { params } };\n}\n","import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n","import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Route,\n  Router,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<ParamList extends ParamListBase> =\n  NavigationState<ParamList> & {\n    /**\n     * Type of the router, in this case, it's stack.\n     */\n    type: 'stack';\n  };\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = state.routes.filter(\n        (route) =>\n          routeNames.includes(route.name) &&\n          !routeKeyChanges.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route = id\n              ? state.routes.find(\n                  (route) =>\n                    route.name === action.payload.name &&\n                    id === getId?.({ params: route.params })\n                )\n              : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key: `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  path: action.payload.path,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge) {\n              params =\n                action.payload.params !== undefined ||\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                      ...action.payload.params,\n                    }\n                  : route.params;\n            } else {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params ||\n                (action.payload.path && action.payload.path !== route.path)\n                  ? {\n                      ...route,\n                      path: action.payload.path ?? route.path,\n                      params,\n                    }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n","import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior =\n  | 'initialRoute'\n  | 'firstRoute'\n  | 'history'\n  | 'order'\n  | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key,\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'firstRoute',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (\n          state as PartialState<TabNavigationState<ParamListBase>>\n        ).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const history =\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\n        [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find(\n            (r) => r.name === name && !routeKeyChanges.includes(r.name)\n          ) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList, routeGetIdList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n\n                const getId = routeGetIdList[route.name];\n\n                const currentId = getId?.({ params: route.params });\n                const nextId = getId?.({ params: action.payload.params });\n\n                const key =\n                  currentId === nextId\n                    ? route.key\n                    : `${route.name}-${nanoid()}`;\n\n                let params;\n\n                if (\n                  action.type === 'NAVIGATE' &&\n                  action.payload.merge &&\n                  currentId === nextId\n                ) {\n                  params =\n                    action.payload.params !== undefined ||\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...route.params,\n                          ...action.payload.params,\n                        }\n                      : route.params;\n                } else {\n                  params =\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params;\n                }\n\n                const path =\n                  action.type === 'NAVIGATE' && action.payload.path != null\n                    ? action.payload.path\n                    : route.path;\n\n                return params !== route.params || path !== route.path\n                  ? { ...route, key, path, params }\n                  : route;\n              }),\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n","import * as CommonActions from './CommonActions';\n\nexport { CommonActions };\n\nexport { default as BaseRouter } from './BaseRouter';\nexport type {\n  DrawerActionHelpers,\n  DrawerActionType,\n  DrawerNavigationState,\n  DrawerRouterOptions,\n  DrawerStatus,\n} from './DrawerRouter';\nexport { DrawerActions, default as DrawerRouter } from './DrawerRouter';\nexport type {\n  StackActionHelpers,\n  StackActionType,\n  StackNavigationState,\n  StackRouterOptions,\n} from './StackRouter';\nexport { StackActions, default as StackRouter } from './StackRouter';\nexport type {\n  TabActionHelpers,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nexport { TabActions, default as TabRouter } from './TabRouter';\nexport * from './types';\n"],"names":["b","Symbol","c","d","e","f","g","h","k","l","m","n","p","q","r","t","v","w","x","y","z","a","u","A","exports","process","module","require","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interop_require_wildcard","obj","cache","newObj","hasPropertyDescriptor","Object","key","desc","ownKeys","object","enumerableOnly","keys","symbols","sym","_object_spread_props","target","source","_object_without_properties_loose","_object_without_properties","excluded","i","sourceSymbolKeys","sourceKeys","_type_of","_to_primitive","input","hint","prim","undefined","res","TypeError","String","Number","_to_property_key","arg","token","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","err","left","right","Array","decode","tokens","customDecodeURIComponent","replaceMap","match","result","entries","encodedURI","string","predicate","ret","isArr","val","customAlphabet","nanoid","urlAlphabet","alphabet","defaultSize","size","id","Math","strictUriEncode","decodeComponent","splitOnFirst","filterObject","isNullOrUndefined","value","encodeFragmentIdentifier","encoderForArrayFormat","options","index","encode","keyValueSep","parserForArrayFormat","accumulator","isArray","isEncodedArray","newValue","item","arrayValue","validateArrayFormatSeparator","encodeURIComponent","keysSorter","removeHash","hashStart","getHash","url","hash","extract","queryStart","parseValue","parse","query","formatter","param","_splitOnFirst","key1","value1","Boolean","shouldFilter","objectCopy","url_","queryFromUrl","parsedQueryFromUrl","queryString","filter","_exports_parseUrl","fragmentIdentifier","exclusionFilter","separator","separatorIndex","str","React","useIsomorphicLayoutEffect_1","useLatestCallback","callback","ref","latestCallback","args","_i","arguments","react_1","_default","serializableWarnings","duplicateNameWarnings","getPartialState","state","routeNames","partialState","route","BaseNavigationContainer","_react","ref1","initialState","onStateChange","onUnhandledAction","independent","children","parent","_NavigationStateContext","Error","_useSyncState1","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","navigatorKeyRef","getKey","setKey","_useChildListeners1","listeners","addListener","_useKeyedChildListeners1","keyedListeners","addKeyedListener","dispatch","action","console","_createNavigationContainerRef","navigation","canGoBack","_listeners_focus_","handled","resetRoot","_keyedListeners_getState","_routers","getRootState","getCurrentRoute","_findFocusedRoute","emitter","_useEventEmitter","_useOptionsGetters1","addOptionsGetter","getCurrentOptions","acc","name","_CommonActions","stateRef","onDispatchAction","noop","stackRef","lastEmittedOptionsRef","onOptionsChange","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","hydratedState","serializableResult","_checkSerializable","location","reason","path","pointer","params","curr","prev","JSON","message","duplicateRouteNamesResult","_checkDuplicateRouteNames","message1","locations","defaultOnUnhandledAction","payload","element","_NavigationContainerRefContext","_useScheduleUpdate","_NavigationBuilderContext","_UnhandledActionContext","_EnsureSingleNavigator","_NavigationRouteContext","_NavigationContext","CurrentRenderContext","SingleNavigatorContext","EnsureSingleNavigator","MULTIPLE_NAVIGATOR_ERROR","currentKey","Group","_","NavigationBuilderContext","NavigationContainerRefContext","NavigationContext","NavigationHelpersContext","NavigationRouteContext","MISSING_CONTEXT_ERROR","PreventRemoveContext","PreventRemoveProvider","transformPreventedRoutes","preventedRoutesMap","preventedRoutesToTransform","preventedRoutes","routeKey","preventRemove","_acc_routeKey","_React_useState","_nonsecure","parentId","_React_useState1","Map","setPreventedRoutesMap","_NavigationHelpersContext","preventRemoveContextValue","_PreventRemoveContext","setParentPrevented","setPreventRemove","_uselatestcallback","prevPrevented","_prevPrevented_get","_prevPrevented_get1","nextPrevented","isPrevented","SceneView","screen","routeState","clearOptions","_useOptionsGetters","getCurrentState","currentRoute","setCurrentState","child","ScreenComponent","_StaticContainer","Screen","StaticContainer","props","prevProps","nextProps","prevPropKeys","nextPropKeys","UnhandledActionContext","checkDuplicateRouteNames","duplicates","getRouteNames","_route_state_routeNames","currentLocation","routeName","checkSerializable","checkSerializableWithoutCircularReference","o","seen","childResult","Set","childResult1","NOT_INITIALIZED_ERROR","createNavigationContainerRef","methods","removeListener","event","cb","current","callbacks","_args","_args1","event1","callback1","_current","createNavigatorFactory","Navigator","_Group","_Screen","findFocusedRoute","fromEntries","getActionFromState","_normalizedConfig_screens","normalizedConfig","createNormalizedConfigItem","routes","config","_config_screens","routes1","route1","createNormalizedConfigs","getFocusedRouteNameFromRoute","_useRouteCache","getPathFromState","_instance","getActiveRoute","pattern","currentOptions","nestedRouteNames","_currentOptions_route_name","stringify","currentParams","_fromEntries","allParams","focusedRoute","focusedParams","getParamName","hasNext","nextRoute","nestedConfig","configs","_querystring","_validatePathConfig","joinPaths","paths","createConfigItem","parentPattern","pattern1","screens","getStateFromPath","initialRoutes","remaining","segment","createNestedStateObject","aParts","bParts","aWildCard","bWildCard","intersects","it","_configs_find","_matchAgainstConfigs","remainingPath","matchAgainstConfigs","_config_pattern","matchResult","decodedParamSegment","matchedParams","_routeConfig_pattern_replace","routeConfig","normalizedPath","numInitialSegments","_escapestringregexp","_matchedParams_p","offset","_routeConfig_parse","initials","parentScreens","_configs","regex","findParseConfigForRoute","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","isEmpty","nestedState","nestedStateIndex","parseQueryParams","parseConfig","_BaseNavigationContainer","_CurrentRenderContext","_PreventRemoveProvider","_usePreventRemove","_createNavigatorFactory","_getActionFromState","_getFocusedRouteNameFromRoute","_getPathFromState","_getStateFromPath","_useFocusEffect","_useIsFocused","_useNavigation","_useNavigationBuilder","_useNavigationContainerRef","_useNavigationState","_usePreventRemoveContext","_useRoute","isArrayEqual","isRecordEqual","aKeys","bKeys","PrivateValueStore","useChildListeners","_React_useRef","type","listener","removed","useComponent","NavigationContent","render","renderRef","_$render","useCurrentRender","descriptors","useDescriptors","screenOptions","defaultScreenOptions","onAction","onRouteFocus","router","setOptions","_React_useContext","navigations","_useNavigationCache","optionsList","customOptions","mergedOptions","_route_key","rest","_SceneView","useEventEmitter","listen","listenRef","create","emit","data","canPreventDefault","_items_target","items","self","defaultPrevented","useFocusEffect","effect","isFocused","cleanup","destroy","unsubscribeFocus","unsubscribeBlur","useFocusEvents","lastFocusedKeyRef","currentFocusedKey","lastFocusedKey","useFocusedListenersChildrenAdapter","focusedListeners","_listener","useIsFocused","_useState","setIsFocused","valueToReturn","useKeyedChildListeners","useNavigation","root","useNavigationBuilder","_types","isValidKey","getRouteConfigsFromChildren","groupKey","groupOptions","_child_type","_child_props","_acc","_config_props","_$children","component","getComponent","_reactis","createRouter","navigatorKey","_useRegisterNavigator","screenListeners","routeConfigs","routeKeyList","routeParamList","initialParams","routeGetIdList","isStateValid","isStateInitialized","currentState","stateCleanedUp","cleanUpState","_React_useMemo","_route_params","initialRouteParamList","_route_params1","_route_params2","initialParamsFromParams","initializedState","isFirstStateInitialization","previousRouteKeyListRef","previousRouteKeyList","nextState","_isArrayEqual","_isRecordEqual","previousNestedParamsRef","previousParams","updatedState","shouldUpdate","setTimeout","initializedStateRef","_routeNames","map","_useFocusEvents","childListeners","_useOnAction","_useOnRouteFocus","_useNavigationHelpers","_useFocusedListenersChildrenAdapter","_useOnGetState","_useDescriptors","_useCurrentRender","_useComponent","useNavigationCache","actions","previous","thunk","withStack","isStackSet","helpers","_actions","useNavigationContainerRef","useNavigationHelpers","navigatorId","parentNavigationHelpers","op","navigationHelpers","useNavigationState","selector","setResult","selectorRef","unsubscribe","useOnAction","actionListeners","beforeRemoveListeners","routerConfigOptions","onActionParent","onRouteFocusParent","addListenerParent","routerConfigOptionsRef","visitedNavigators","_useOnPreventRemove","shouldFocus","useOnGetState","getStateListeners","getRehydratedState","childState","useOnPreventRemove","shouldPreventRemove","VISITED_ROUTE_KEYS","currentRoutes","nextRoutes","nextRouteKeys","removedRoutes","visitedRouteKeys","beforeRemoveAction","useOnRouteFocus","sourceRouteKey","useOptionsGetters","optionsRef","optionsGettersFromChildRef","parentAddOptionsGetter","optionsChangeListener","hasChildren","getOptionsFromListener","_optionsGettersFromChildRef_current","optionsFromListener","getter","usePreventRemove","_useRoute1","beforeRemoveListener","usePreventRemoveContext","useRegisterNavigator","container","register","unregister","useRoute","CHILD_STATE","useRouteCache","proxy","ScheduleUpdateContext","useScheduleUpdate","useSyncState","UNINTIALIZED_STATE","isSchedulingRef","isMountedRef","trackingState","setTrackingState","validatePathConfig","formatToList","validKeys","invalidKeys","Link","_param","to","_useLinkProps","onPress","_reactnative","LinkingContext","global","NavigationContainerInner","theme","_DefaultTheme","linking","fallback","documentTitle","onReady","isLinkingEnabled","_core","refContainer","_useBackButton","_useDocumentTitle","getInitialState","_useLinking","REACT_NAVIGATION_DEVTOOLS","_useThenable1","isResolved","linkingContext","isReady","onReadyRef","_LinkingContext","_ThemeProvider","NavigationContainer","ServerContainer","_ServerContext","ServerContext","extractPathFromURL","prefixes","prefix","_prefix_match","protocol","host","prefixRegex","_url_split","originAndPath","searchParams","normalizedURL","_DarkTheme","_Link","_NavigationContainer","_ServerContainer","_useLinkBuilder","_useLinkTo","_useScrollToTop","_useTheme","DarkTheme","DefaultTheme","ThemeContext","ThemeProvider","_ThemeContext","useTheme","useBackButton","subscription","useDocumentTitle","useLinkBuilder","getRootStateForNavigate","parentState","buildLink","useLinkProps","getStateFromParams","linkTo","_e_currentTarget","shouldHandle","getPathFromStateHelper","href","useLinkTo","useLinking","linkingHandlers","enabled","getInitialURL","Promise","resolve","subscribe","_Linking_removeEventListener","removeEventListener","handler","enabledRef","prefixesRef","filterRef","configRef","getInitialURLRef","getStateFromPathRef","getActionFromStateRef","getStateFromURL","_extractPathFromURL","thenable","onfulfilled","rootState","useScrollToTop","getScrollableNode","tabNavigations","currentNavigation","unsubscribers","tab","isFirst","requestAnimationFrame","scrollable","useThenable","promise","_state","resolved","cancelled","BaseRouter","goBack","navigate","reset","setParams","DrawerActions","DrawerRouter","_TabRouter","defaultStatus","isDrawerInHistory","_state_history","addDrawerToHistory","removeDrawerFromHistory","openDrawer","closeDrawer","StackActions","StackRouter","count","_BaseRouter","initialRouteName","routeKeyChanges","_action_payload","getId","index1","index2","getId1","id1","routes2","params1","TabActions","TabRouter","TYPE_ROUTE","getRouteHistory","backBehavior","history","initialRouteIndex","changeIndex","_state_routes_","currentId","nextId","previousKey","_DrawerRouter","_StackRouter"],"mappings":"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"}